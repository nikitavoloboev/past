/*
Copyright (c) 2023-2024 Microbus LLC and various contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Microbus. DO NOT EDIT.

/*
Package intermediate serves as the foundation of the directory.example microservice.

The directory microservice exposes a RESTful API for persisting personal records in a SQL database.
*/
package intermediate

import (
	"context"
	"embed"
	"encoding/json"
	"fmt"
	"net/http"
	"path/filepath"
	"strconv"
	"strings"
	"time"

	"github.com/microbus-io/fabric/cfg"
	"github.com/microbus-io/fabric/connector"
	"github.com/microbus-io/fabric/errors"
	"github.com/microbus-io/fabric/frame"
	"github.com/microbus-io/fabric/httpx"
	"github.com/microbus-io/fabric/openapi"
	"github.com/microbus-io/fabric/service"
	"github.com/microbus-io/fabric/sub"

	"gopkg.in/yaml.v3"

	"github.com/microbus-io/fabric/examples/directory/resources"
	"github.com/microbus-io/fabric/examples/directory/directoryapi"
)

var (
	_ context.Context
	_ *embed.FS
	_ *json.Decoder
	_ fmt.Stringer
	_ *http.Request
	_ filepath.WalkFunc
	_ strconv.NumError
	_ strings.Reader
	_ time.Duration
	_ cfg.Option
	_ *errors.TracedError
	_ frame.Frame
	_ *httpx.ResponseRecorder
	_ *openapi.Service
	_ service.Service
	_ sub.Option
	_ yaml.Encoder
	_ directoryapi.Client
)

// ToDo defines the interface that the microservice must implement.
// The intermediate delegates handling to this interface.
type ToDo interface {
	OnStartup(ctx context.Context) (err error)
	OnShutdown(ctx context.Context) (err error)
	Create(ctx context.Context, httpRequestBody *directoryapi.Person) (key directoryapi.PersonKey, err error)
	Load(ctx context.Context, key directoryapi.PersonKey) (httpResponseBody *directoryapi.Person, err error)
	Delete(ctx context.Context, key directoryapi.PersonKey) (err error)
	Update(ctx context.Context, key directoryapi.PersonKey, httpRequestBody *directoryapi.Person) (err error)
	LoadByEmail(ctx context.Context, email string) (httpResponseBody *directoryapi.Person, err error)
	List(ctx context.Context) (httpResponseBody []directoryapi.PersonKey, err error)
	WebUI(w http.ResponseWriter, r *http.Request) (err error)
}

// Intermediate extends and customizes the generic base connector.
// Code generated microservices then extend the intermediate.
type Intermediate struct {
	*connector.Connector
	impl ToDo
}

// NewService creates a new intermediate service.
func NewService(impl ToDo, version int) *Intermediate {
	svc := &Intermediate{
		Connector: connector.New("directory.example"),
		impl: impl,
	}
	svc.SetVersion(version)
	svc.SetDescription(`The directory microservice exposes a RESTful API for persisting personal records in a SQL database.`)
	
	// Lifecycle
	svc.SetOnStartup(svc.impl.OnStartup)
	svc.SetOnShutdown(svc.impl.OnShutdown)

	// Configs
	svc.SetOnConfigChanged(svc.doOnConfigChanged)
	svc.DefineConfig(
		"SQL",
		cfg.Description(`SQL is the connection string to the database.`),
	)

	// OpenAPI
	svc.Subscribe("GET", `:0/openapi.json`, svc.doOpenAPI)	

	// Functions
	svc.Subscribe(`POST`, `:443/persons`, svc.doCreate)
	svc.Subscribe(`GET`, `:443/persons/key/{key}`, svc.doLoad)
	svc.Subscribe(`DELETE`, `:443/persons/key/{key}`, svc.doDelete)
	svc.Subscribe(`PUT`, `:443/persons/key/{key}`, svc.doUpdate)
	svc.Subscribe(`GET`, `:443/persons/email/{email}`, svc.doLoadByEmail)
	svc.Subscribe(`GET`, `:443/persons`, svc.doList)

	// Webs
	svc.Subscribe(`ANY`, `:443/web-ui`, svc.impl.WebUI)

	// Resources file system
	svc.SetResFS(resources.FS)

	return svc
}

// doOpenAPI renders the OpenAPI document of the microservice.
func (svc *Intermediate) doOpenAPI(w http.ResponseWriter, r *http.Request) error {
	oapiSvc := openapi.Service{
		ServiceName: svc.Hostname(),
		Description: svc.Description(),
		Version:     svc.Version(),
		Endpoints:   []*openapi.Endpoint{},
		RemoteURI:   frame.Of(r).XForwardedFullURL(),
	}
	if r.URL.Port() == "443" || "443" == "0" {
		oapiSvc.Endpoints = append(oapiSvc.Endpoints, &openapi.Endpoint{
			Type:        `function`,
			Name:        `Create`,
			Method:      `POST`,
			Path:        `:443/persons`,
			Summary:     `Create(httpRequestBody *Person) (key PersonKey)`,
			Description: `Create registers the person in the directory.`,
			InputArgs: struct {
				HTTPRequestBody *directoryapi.Person `json:"httpRequestBody"`
			}{},
			OutputArgs: struct {
				Key directoryapi.PersonKey `json:"key"`
			}{},
		})
	}
	if r.URL.Port() == "443" || "443" == "0" {
		oapiSvc.Endpoints = append(oapiSvc.Endpoints, &openapi.Endpoint{
			Type:        `function`,
			Name:        `Load`,
			Method:      `GET`,
			Path:        `:443/persons/key/{key}`,
			Summary:     `Load(key PersonKey) (httpResponseBody *Person)`,
			Description: `Load looks up a person in the directory.`,
			InputArgs: struct {
				Key directoryapi.PersonKey `json:"key"`
			}{},
			OutputArgs: struct {
				HTTPResponseBody *directoryapi.Person `json:"httpResponseBody"`
			}{},
		})
	}
	if r.URL.Port() == "443" || "443" == "0" {
		oapiSvc.Endpoints = append(oapiSvc.Endpoints, &openapi.Endpoint{
			Type:        `function`,
			Name:        `Delete`,
			Method:      `DELETE`,
			Path:        `:443/persons/key/{key}`,
			Summary:     `Delete(key PersonKey)`,
			Description: `Delete removes a person from the directory.`,
			InputArgs: struct {
				Key directoryapi.PersonKey `json:"key"`
			}{},
			OutputArgs: struct {
			}{},
		})
	}
	if r.URL.Port() == "443" || "443" == "0" {
		oapiSvc.Endpoints = append(oapiSvc.Endpoints, &openapi.Endpoint{
			Type:        `function`,
			Name:        `Update`,
			Method:      `PUT`,
			Path:        `:443/persons/key/{key}`,
			Summary:     `Update(key PersonKey, httpRequestBody *Person)`,
			Description: `Update updates the person's data in the directory.`,
			InputArgs: struct {
				Key directoryapi.PersonKey `json:"key"`
				HTTPRequestBody *directoryapi.Person `json:"httpRequestBody"`
			}{},
			OutputArgs: struct {
			}{},
		})
	}
	if r.URL.Port() == "443" || "443" == "0" {
		oapiSvc.Endpoints = append(oapiSvc.Endpoints, &openapi.Endpoint{
			Type:        `function`,
			Name:        `LoadByEmail`,
			Method:      `GET`,
			Path:        `:443/persons/email/{email}`,
			Summary:     `LoadByEmail(email string) (httpResponseBody *Person)`,
			Description: `LoadByEmail looks up a person in the directory by their email.`,
			InputArgs: struct {
				Email string `json:"email"`
			}{},
			OutputArgs: struct {
				HTTPResponseBody *directoryapi.Person `json:"httpResponseBody"`
			}{},
		})
	}
	if r.URL.Port() == "443" || "443" == "0" {
		oapiSvc.Endpoints = append(oapiSvc.Endpoints, &openapi.Endpoint{
			Type:        `function`,
			Name:        `List`,
			Method:      `GET`,
			Path:        `:443/persons`,
			Summary:     `List() (httpResponseBody []PersonKey)`,
			Description: `List returns the keys of all the persons in the directory.`,
			InputArgs: struct {
			}{},
			OutputArgs: struct {
				HTTPResponseBody []directoryapi.PersonKey `json:"httpResponseBody"`
			}{},
		})
	}
	if r.URL.Port() == "443" || "443" == "0" {
		oapiSvc.Endpoints = append(oapiSvc.Endpoints, &openapi.Endpoint{
			Type:        `web`,
			Name:        `WebUI`,
			Method:      `ANY`,
			Path:        `:443/web-ui`,
			Summary:     `WebUI()`,
			Description: `WebUI provides a form for making web requests to the CRUD endpoints.`,
			InputArgs: struct {
			}{},
			OutputArgs: struct {
			}{},
		})
	}

	if len(oapiSvc.Endpoints) == 0 {
		w.WriteHeader(http.StatusNotFound)
		return nil
	}
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	encoder := json.NewEncoder(w)
	encoder.SetIndent("", "  ")
	err := encoder.Encode(&oapiSvc)
	return errors.Trace(err)
}

// doOnConfigChanged is called when the config of the microservice changes.
func (svc *Intermediate) doOnConfigChanged(ctx context.Context, changed func(string) bool) (err error) {
	return nil
}

/*
SQL is the connection string to the database.
*/
func (svc *Intermediate) SQL() (dsn string) {
	_val := svc.Config("SQL")
	return _val
}

/*
SetSQL sets the value of the configuration property.

SQL is the connection string to the database.
*/
func (svc *Intermediate) SetSQL(dsn string) error {
	return svc.SetConfig("SQL", fmt.Sprintf("%v", dsn))
}

// doCreate handles marshaling for the Create function.
func (svc *Intermediate) doCreate(w http.ResponseWriter, r *http.Request) error {
	var i directoryapi.CreateIn
	var o directoryapi.CreateOut
	err := httpx.ParseRequestBody(r, &i.HTTPRequestBody)
	if err != nil {
		return errors.Trace(err)
	}
	err = httpx.DecodeDeepObject(r.URL.Query(), &i)
	if err != nil {
		return errors.Trace(err)
	}
	if strings.ContainsAny(`:443/persons`, "{}") {
		pathArgs, err := httpx.ExtractPathArguments(httpx.JoinHostAndPath("host", `:443/persons`), r.URL.Path)
		if err != nil {
			return errors.Trace(err)
		}
		err = httpx.DecodeDeepObject(pathArgs, &i)
		if err != nil {
			return errors.Trace(err)
		}
	}
	o.Key, err = svc.impl.Create(
		r.Context(),
		i.HTTPRequestBody,
	)
	if err != nil {
		return err // No trace
	}
	w.Header().Set("Content-Type", "application/json")
	encoder := json.NewEncoder(w)
	if svc.Deployment() == connector.LOCAL {
		encoder.SetIndent("", "  ")
	}
	err = encoder.Encode(o)
	if err != nil {
		return errors.Trace(err)
	}
	return nil
}

// doLoad handles marshaling for the Load function.
func (svc *Intermediate) doLoad(w http.ResponseWriter, r *http.Request) error {
	var i directoryapi.LoadIn
	var o directoryapi.LoadOut
	err := httpx.ParseRequestData(r, &i)
	if err != nil {
		return errors.Trace(err)
	}
	if strings.ContainsAny(`:443/persons/key/{key}`, "{}") {
		pathArgs, err := httpx.ExtractPathArguments(httpx.JoinHostAndPath("host", `:443/persons/key/{key}`), r.URL.Path)
		if err != nil {
			return errors.Trace(err)
		}
		err = httpx.DecodeDeepObject(pathArgs, &i)
		if err != nil {
			return errors.Trace(err)
		}
	}
	o.HTTPResponseBody, err = svc.impl.Load(
		r.Context(),
		i.Key,
	)
	if err != nil {
		return err // No trace
	}
	w.Header().Set("Content-Type", "application/json")
	encoder := json.NewEncoder(w)
	if svc.Deployment() == connector.LOCAL {
		encoder.SetIndent("", "  ")
	}
	err = encoder.Encode(o.HTTPResponseBody)
	if err != nil {
		return errors.Trace(err)
	}
	return nil
}

// doDelete handles marshaling for the Delete function.
func (svc *Intermediate) doDelete(w http.ResponseWriter, r *http.Request) error {
	var i directoryapi.DeleteIn
	var o directoryapi.DeleteOut
	err := httpx.ParseRequestData(r, &i)
	if err != nil {
		return errors.Trace(err)
	}
	if strings.ContainsAny(`:443/persons/key/{key}`, "{}") {
		pathArgs, err := httpx.ExtractPathArguments(httpx.JoinHostAndPath("host", `:443/persons/key/{key}`), r.URL.Path)
		if err != nil {
			return errors.Trace(err)
		}
		err = httpx.DecodeDeepObject(pathArgs, &i)
		if err != nil {
			return errors.Trace(err)
		}
	}
	err = svc.impl.Delete(
		r.Context(),
		i.Key,
	)
	if err != nil {
		return err // No trace
	}
	w.Header().Set("Content-Type", "application/json")
	encoder := json.NewEncoder(w)
	if svc.Deployment() == connector.LOCAL {
		encoder.SetIndent("", "  ")
	}
	err = encoder.Encode(o)
	if err != nil {
		return errors.Trace(err)
	}
	return nil
}

// doUpdate handles marshaling for the Update function.
func (svc *Intermediate) doUpdate(w http.ResponseWriter, r *http.Request) error {
	var i directoryapi.UpdateIn
	var o directoryapi.UpdateOut
	err := httpx.ParseRequestBody(r, &i.HTTPRequestBody)
	if err != nil {
		return errors.Trace(err)
	}
	err = httpx.DecodeDeepObject(r.URL.Query(), &i)
	if err != nil {
		return errors.Trace(err)
	}
	if strings.ContainsAny(`:443/persons/key/{key}`, "{}") {
		pathArgs, err := httpx.ExtractPathArguments(httpx.JoinHostAndPath("host", `:443/persons/key/{key}`), r.URL.Path)
		if err != nil {
			return errors.Trace(err)
		}
		err = httpx.DecodeDeepObject(pathArgs, &i)
		if err != nil {
			return errors.Trace(err)
		}
	}
	err = svc.impl.Update(
		r.Context(),
		i.Key,
		i.HTTPRequestBody,
	)
	if err != nil {
		return err // No trace
	}
	w.Header().Set("Content-Type", "application/json")
	encoder := json.NewEncoder(w)
	if svc.Deployment() == connector.LOCAL {
		encoder.SetIndent("", "  ")
	}
	err = encoder.Encode(o)
	if err != nil {
		return errors.Trace(err)
	}
	return nil
}

// doLoadByEmail handles marshaling for the LoadByEmail function.
func (svc *Intermediate) doLoadByEmail(w http.ResponseWriter, r *http.Request) error {
	var i directoryapi.LoadByEmailIn
	var o directoryapi.LoadByEmailOut
	err := httpx.ParseRequestData(r, &i)
	if err != nil {
		return errors.Trace(err)
	}
	if strings.ContainsAny(`:443/persons/email/{email}`, "{}") {
		pathArgs, err := httpx.ExtractPathArguments(httpx.JoinHostAndPath("host", `:443/persons/email/{email}`), r.URL.Path)
		if err != nil {
			return errors.Trace(err)
		}
		err = httpx.DecodeDeepObject(pathArgs, &i)
		if err != nil {
			return errors.Trace(err)
		}
	}
	o.HTTPResponseBody, err = svc.impl.LoadByEmail(
		r.Context(),
		i.Email,
	)
	if err != nil {
		return err // No trace
	}
	w.Header().Set("Content-Type", "application/json")
	encoder := json.NewEncoder(w)
	if svc.Deployment() == connector.LOCAL {
		encoder.SetIndent("", "  ")
	}
	err = encoder.Encode(o.HTTPResponseBody)
	if err != nil {
		return errors.Trace(err)
	}
	return nil
}

// doList handles marshaling for the List function.
func (svc *Intermediate) doList(w http.ResponseWriter, r *http.Request) error {
	var i directoryapi.ListIn
	var o directoryapi.ListOut
	err := httpx.ParseRequestData(r, &i)
	if err != nil {
		return errors.Trace(err)
	}
	if strings.ContainsAny(`:443/persons`, "{}") {
		pathArgs, err := httpx.ExtractPathArguments(httpx.JoinHostAndPath("host", `:443/persons`), r.URL.Path)
		if err != nil {
			return errors.Trace(err)
		}
		err = httpx.DecodeDeepObject(pathArgs, &i)
		if err != nil {
			return errors.Trace(err)
		}
	}
	o.HTTPResponseBody, err = svc.impl.List(
		r.Context(),
	)
	if err != nil {
		return err // No trace
	}
	w.Header().Set("Content-Type", "application/json")
	encoder := json.NewEncoder(w)
	if svc.Deployment() == connector.LOCAL {
		encoder.SetIndent("", "  ")
	}
	err = encoder.Encode(o.HTTPResponseBody)
	if err != nil {
		return errors.Trace(err)
	}
	return nil
}
