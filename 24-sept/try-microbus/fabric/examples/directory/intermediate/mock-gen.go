/*
Copyright (c) 2023-2024 Microbus LLC and various contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Microbus. DO NOT EDIT.

package intermediate

import (
	"context"
	"net/http"
	"time"

	"github.com/microbus-io/fabric/connector"
	"github.com/microbus-io/fabric/errors"

	"github.com/microbus-io/fabric/examples/directory/directoryapi"
)

var (
	_ context.Context
	_ *http.Request
	_ time.Duration
	_ *errors.TracedError
	_ directoryapi.Client
)

// Mock is a mockable version of the directory.example microservice, allowing functions, event sinks and web handlers to be mocked.
type Mock struct {
	*Intermediate
	mockCreate func(ctx context.Context, httpRequestBody *directoryapi.Person) (key directoryapi.PersonKey, err error)
	mockLoad func(ctx context.Context, key directoryapi.PersonKey) (httpResponseBody *directoryapi.Person, err error)
	mockDelete func(ctx context.Context, key directoryapi.PersonKey) (err error)
	mockUpdate func(ctx context.Context, key directoryapi.PersonKey, httpRequestBody *directoryapi.Person) (err error)
	mockLoadByEmail func(ctx context.Context, email string) (httpResponseBody *directoryapi.Person, err error)
	mockList func(ctx context.Context) (httpResponseBody []directoryapi.PersonKey, err error)
	mockWebUI func(w http.ResponseWriter, r *http.Request) (err error)
}

// NewMock creates a new mockable version of the microservice.
func NewMock() *Mock {
	m := &Mock{}
	m.Intermediate = NewService(m, 7357) // Stands for TEST
	return m
}

// OnStartup makes sure that the mock is not executed in a non-dev environment.
func (svc *Mock) OnStartup(ctx context.Context) (err error) {
	if svc.Deployment() != connector.LOCAL && svc.Deployment() != connector.TESTING {
		return errors.Newf("mocking disallowed in '%s' deployment", svc.Deployment())
	}
	return nil
}

// OnShutdown is a no op.
func (svc *Mock) OnShutdown(ctx context.Context) (err error) {
	return nil
}

// MockCreate sets up a mock handler for the Create endpoint.
func (svc *Mock) MockCreate(handler func(ctx context.Context, httpRequestBody *directoryapi.Person) (key directoryapi.PersonKey, err error)) *Mock {
	svc.mockCreate = handler
	return svc
}

// Create runs the mock handler set by MockCreate.
func (svc *Mock) Create(ctx context.Context, httpRequestBody *directoryapi.Person) (key directoryapi.PersonKey, err error) {
	if svc.mockCreate == nil {
		err = errors.New("mocked endpoint 'Create' not implemented")
		return
	}
	return svc.mockCreate(ctx, httpRequestBody)
}

// MockLoad sets up a mock handler for the Load endpoint.
func (svc *Mock) MockLoad(handler func(ctx context.Context, key directoryapi.PersonKey) (httpResponseBody *directoryapi.Person, err error)) *Mock {
	svc.mockLoad = handler
	return svc
}

// Load runs the mock handler set by MockLoad.
func (svc *Mock) Load(ctx context.Context, key directoryapi.PersonKey) (httpResponseBody *directoryapi.Person, err error) {
	if svc.mockLoad == nil {
		err = errors.New("mocked endpoint 'Load' not implemented")
		return
	}
	return svc.mockLoad(ctx, key)
}

// MockDelete sets up a mock handler for the Delete endpoint.
func (svc *Mock) MockDelete(handler func(ctx context.Context, key directoryapi.PersonKey) (err error)) *Mock {
	svc.mockDelete = handler
	return svc
}

// Delete runs the mock handler set by MockDelete.
func (svc *Mock) Delete(ctx context.Context, key directoryapi.PersonKey) (err error) {
	if svc.mockDelete == nil {
		err = errors.New("mocked endpoint 'Delete' not implemented")
		return
	}
	return svc.mockDelete(ctx, key)
}

// MockUpdate sets up a mock handler for the Update endpoint.
func (svc *Mock) MockUpdate(handler func(ctx context.Context, key directoryapi.PersonKey, httpRequestBody *directoryapi.Person) (err error)) *Mock {
	svc.mockUpdate = handler
	return svc
}

// Update runs the mock handler set by MockUpdate.
func (svc *Mock) Update(ctx context.Context, key directoryapi.PersonKey, httpRequestBody *directoryapi.Person) (err error) {
	if svc.mockUpdate == nil {
		err = errors.New("mocked endpoint 'Update' not implemented")
		return
	}
	return svc.mockUpdate(ctx, key, httpRequestBody)
}

// MockLoadByEmail sets up a mock handler for the LoadByEmail endpoint.
func (svc *Mock) MockLoadByEmail(handler func(ctx context.Context, email string) (httpResponseBody *directoryapi.Person, err error)) *Mock {
	svc.mockLoadByEmail = handler
	return svc
}

// LoadByEmail runs the mock handler set by MockLoadByEmail.
func (svc *Mock) LoadByEmail(ctx context.Context, email string) (httpResponseBody *directoryapi.Person, err error) {
	if svc.mockLoadByEmail == nil {
		err = errors.New("mocked endpoint 'LoadByEmail' not implemented")
		return
	}
	return svc.mockLoadByEmail(ctx, email)
}

// MockList sets up a mock handler for the List endpoint.
func (svc *Mock) MockList(handler func(ctx context.Context) (httpResponseBody []directoryapi.PersonKey, err error)) *Mock {
	svc.mockList = handler
	return svc
}

// List runs the mock handler set by MockList.
func (svc *Mock) List(ctx context.Context) (httpResponseBody []directoryapi.PersonKey, err error) {
	if svc.mockList == nil {
		err = errors.New("mocked endpoint 'List' not implemented")
		return
	}
	return svc.mockList(ctx)
}

// MockWebUI sets up a mock handler for the WebUI endpoint.
func (svc *Mock) MockWebUI(handler func(w http.ResponseWriter, r *http.Request) (err error)) *Mock {
	svc.mockWebUI = handler
	return svc
}

// WebUI runs the mock handler set by MockWebUI.
func (svc *Mock) WebUI(w http.ResponseWriter, r *http.Request) (err error) {
	if svc.mockWebUI == nil {
		return errors.New("mocked endpoint 'WebUI' not implemented")
	}
	err = svc.mockWebUI(w, r)
	return errors.Trace(err)
}
