/*
Copyright (c) 2023-2024 Microbus LLC and various contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Microbus. DO NOT EDIT.

package intermediate

import (
	"context"
	"net/http"
	"time"

	"github.com/microbus-io/fabric/connector"
	"github.com/microbus-io/fabric/errors"

	"github.com/microbus-io/fabric/examples/messaging/messagingapi"
)

var (
	_ context.Context
	_ *http.Request
	_ time.Duration
	_ *errors.TracedError
	_ messagingapi.Client
)

// Mock is a mockable version of the messaging.example microservice, allowing functions, event sinks and web handlers to be mocked.
type Mock struct {
	*Intermediate
	mockHome func(w http.ResponseWriter, r *http.Request) (err error)
	mockNoQueue func(w http.ResponseWriter, r *http.Request) (err error)
	mockDefaultQueue func(w http.ResponseWriter, r *http.Request) (err error)
	mockCacheLoad func(w http.ResponseWriter, r *http.Request) (err error)
	mockCacheStore func(w http.ResponseWriter, r *http.Request) (err error)
}

// NewMock creates a new mockable version of the microservice.
func NewMock() *Mock {
	m := &Mock{}
	m.Intermediate = NewService(m, 7357) // Stands for TEST
	return m
}

// OnStartup makes sure that the mock is not executed in a non-dev environment.
func (svc *Mock) OnStartup(ctx context.Context) (err error) {
	if svc.Deployment() != connector.LOCAL && svc.Deployment() != connector.TESTING {
		return errors.Newf("mocking disallowed in '%s' deployment", svc.Deployment())
	}
	return nil
}

// OnShutdown is a no op.
func (svc *Mock) OnShutdown(ctx context.Context) (err error) {
	return nil
}

// MockHome sets up a mock handler for the Home endpoint.
func (svc *Mock) MockHome(handler func(w http.ResponseWriter, r *http.Request) (err error)) *Mock {
	svc.mockHome = handler
	return svc
}

// Home runs the mock handler set by MockHome.
func (svc *Mock) Home(w http.ResponseWriter, r *http.Request) (err error) {
	if svc.mockHome == nil {
		return errors.New("mocked endpoint 'Home' not implemented")
	}
	err = svc.mockHome(w, r)
	return errors.Trace(err)
}

// MockNoQueue sets up a mock handler for the NoQueue endpoint.
func (svc *Mock) MockNoQueue(handler func(w http.ResponseWriter, r *http.Request) (err error)) *Mock {
	svc.mockNoQueue = handler
	return svc
}

// NoQueue runs the mock handler set by MockNoQueue.
func (svc *Mock) NoQueue(w http.ResponseWriter, r *http.Request) (err error) {
	if svc.mockNoQueue == nil {
		return errors.New("mocked endpoint 'NoQueue' not implemented")
	}
	err = svc.mockNoQueue(w, r)
	return errors.Trace(err)
}

// MockDefaultQueue sets up a mock handler for the DefaultQueue endpoint.
func (svc *Mock) MockDefaultQueue(handler func(w http.ResponseWriter, r *http.Request) (err error)) *Mock {
	svc.mockDefaultQueue = handler
	return svc
}

// DefaultQueue runs the mock handler set by MockDefaultQueue.
func (svc *Mock) DefaultQueue(w http.ResponseWriter, r *http.Request) (err error) {
	if svc.mockDefaultQueue == nil {
		return errors.New("mocked endpoint 'DefaultQueue' not implemented")
	}
	err = svc.mockDefaultQueue(w, r)
	return errors.Trace(err)
}

// MockCacheLoad sets up a mock handler for the CacheLoad endpoint.
func (svc *Mock) MockCacheLoad(handler func(w http.ResponseWriter, r *http.Request) (err error)) *Mock {
	svc.mockCacheLoad = handler
	return svc
}

// CacheLoad runs the mock handler set by MockCacheLoad.
func (svc *Mock) CacheLoad(w http.ResponseWriter, r *http.Request) (err error) {
	if svc.mockCacheLoad == nil {
		return errors.New("mocked endpoint 'CacheLoad' not implemented")
	}
	err = svc.mockCacheLoad(w, r)
	return errors.Trace(err)
}

// MockCacheStore sets up a mock handler for the CacheStore endpoint.
func (svc *Mock) MockCacheStore(handler func(w http.ResponseWriter, r *http.Request) (err error)) *Mock {
	svc.mockCacheStore = handler
	return svc
}

// CacheStore runs the mock handler set by MockCacheStore.
func (svc *Mock) CacheStore(w http.ResponseWriter, r *http.Request) (err error) {
	if svc.mockCacheStore == nil {
		return errors.New("mocked endpoint 'CacheStore' not implemented")
	}
	err = svc.mockCacheStore(w, r)
	return errors.Trace(err)
}
