/*
Copyright (c) 2023-2024 Microbus LLC and various contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Microbus. DO NOT EDIT.

package messaging

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"os"
	"strings"
	"testing"
	"time"

	"github.com/andybalholm/cascadia"
	"github.com/microbus-io/fabric/application"
	"github.com/microbus-io/fabric/connector"
	"github.com/microbus-io/fabric/errors"
	"github.com/microbus-io/fabric/frame"
	"github.com/microbus-io/fabric/httpx"
	"github.com/microbus-io/fabric/pub"
	"github.com/microbus-io/fabric/rand"
	"github.com/microbus-io/fabric/utils"
	"github.com/microbus-io/testarossa"
	"golang.org/x/net/html"

	"github.com/microbus-io/fabric/examples/messaging/messagingapi"
)

var (
	_ bytes.Buffer
	_ context.Context
	_ fmt.Stringer
	_ io.Reader
	_ *http.Request
	_ os.File
	_ time.Time
	_ strings.Builder
	_ cascadia.Sel
	_ *connector.Connector
	_ *errors.TracedError
	_ frame.Frame
	_ *httpx.BodyReader
	_ pub.Option
	_ rand.Void
	_ utils.SyncMap[string, string]
	_ testarossa.TestingT
	_ *html.Node
	_ *messagingapi.Client
)

var (
	// App manages the lifecycle of the microservices used in the test
	App *application.Application
	// Svc is the messaging.example microservice being tested
	Svc *Service
)

func TestMain(m *testing.M) {
	var code int

	// Initialize the application
	err := func() error {
		var err error
		App = application.NewTesting()
		Svc = NewService()
		err = Initialize()
		if err != nil {
			return err
		}
		err = App.Startup()
		if err != nil {
			return err
		}
		return nil
	}()
	if err != nil {
		fmt.Fprintf(os.Stderr, "--- FAIL: %+v\n", err)
		code = 19
	}

	// Run the tests
	if err == nil {
		code = m.Run()
	}

	// Terminate the app
	err = func() error {
		var err error
		var lastErr error
		err = App.Shutdown()
		if err != nil {
			lastErr = err
		}
		err = Terminate()
		if err != nil {
			lastErr = err
		}
		return lastErr
	}()
	if err != nil {
		fmt.Fprintf(os.Stderr, "--- FAIL: %+v\n", err)
	}

	os.Exit(code)
}

// Context creates a new context for a test.
func Context() context.Context {
	return frame.ContextWithFrame(context.Background())
}

// HomeTestCase assists in asserting against the results of executing Home.
type HomeTestCase struct {
	t *testing.T
	dur time.Duration
	res *http.Response
	err error
}

// StatusOK asserts no error and a status code 200.
func (tc *HomeTestCase) StatusOK() *HomeTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.Equal(tc.t, tc.res.StatusCode, http.StatusOK)
	}
	return tc
}

// StatusCode asserts no error and a status code.
func (tc *HomeTestCase) StatusCode(statusCode int) *HomeTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.Equal(tc.t, tc.res.StatusCode, statusCode)
	}
	return tc
}

// BodyContains asserts no error and that the response body contains the string or byte array value.
func (tc *HomeTestCase) BodyContains(value any) *HomeTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		switch v := value.(type) {
		case []byte:
			testarossa.True(tc.t, bytes.Contains(body, v), "%v does not contain %v", body, v)
		case string:
			testarossa.Contains(tc.t, string(body), v)
		default:
			vv := fmt.Sprintf("%v", v)
			testarossa.Contains(tc.t, string(body), vv)
		}
	}
	return tc
}

// BodyNotContains asserts no error and that the response body does not contain the string or byte array value.
func (tc *HomeTestCase) BodyNotContains(value any) *HomeTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		switch v := value.(type) {
		case []byte:
			testarossa.False(tc.t, bytes.Contains(body, v), "%v contains %v", body, v)
		case string:
			testarossa.NotContains(tc.t, string(body), v)
		default:
			vv := fmt.Sprintf("%v", v)
			testarossa.NotContains(tc.t, string(body), vv)
		}
	}
	return tc
}

// HeaderContains asserts no error and that the named header contains the value.
func (tc *HomeTestCase) HeaderContains(headerName string, value string) *HomeTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.Contains(tc.t, tc.res.Header.Get(headerName), value)
	}
	return tc
}

// HeaderNotContains asserts no error and that the named header does not contain a string.
func (tc *HomeTestCase) HeaderNotContains(headerName string, value string) *HomeTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.NotContains(tc.t, tc.res.Header.Get(headerName), value)
	}
	return tc
}

// HeaderEqual asserts no error and that the named header matches the value.
func (tc *HomeTestCase) HeaderEqual(headerName string, value string) *HomeTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.Equal(tc.t, value, tc.res.Header.Get(headerName))
	}
	return tc
}

// HeaderNotEqual asserts no error and that the named header does not matche the value.
func (tc *HomeTestCase) HeaderNotEqual(headerName string, value string) *HomeTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.NotEqual(tc.t, value, tc.res.Header.Get(headerName))
	}
	return tc
}

// HeaderExists asserts no error and that the named header exists.
func (tc *HomeTestCase) HeaderExists(headerName string) *HomeTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.NotEqual(tc.t, 0, len(tc.res.Header.Values(headerName)), "Header %s does not exist", headerName)
	}
	return tc
}

// HeaderNotExists asserts no error and that the named header does not exists.
func (tc *HomeTestCase) HeaderNotExists(headerName string) *HomeTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.Equal(tc.t, 0, len(tc.res.Header.Values(headerName)), "Header %s exists", headerName)
	}
	return tc
}

// ContentType asserts no error and that the Content-Type header matches the expected value.
func (tc *HomeTestCase) ContentType(expected string) *HomeTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.Equal(tc.t, expected, tc.res.Header.Get("Content-Type"))
	}
	return tc
}

/*
TagExists asserts no error and that the at least one tag matches the CSS selector query.

Examples:

	TagExists(`TR > TD > A.expandable[href]`)
	TagExists(`DIV#main_panel`)
	TagExists(`TR TD INPUT[name="x"]`)
*/
func (tc *HomeTestCase) TagExists(cssSelectorQuery string) *HomeTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		selector, err := cascadia.Compile(cssSelectorQuery)
		if !testarossa.NoError(tc.t, err, "Invalid selector %s", cssSelectorQuery) {
			return tc
		}
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		doc, err := html.Parse(bytes.NewReader(body))
		if !testarossa.NoError(tc.t, err, "Failed to parse HTML") {
			return tc
		}
		matches := selector.MatchAll(doc)
		testarossa.NotEqual(tc.t, 0, len(matches), "Found no tags matching %s", cssSelectorQuery)
	}
	return tc
}

/*
TagNotExists asserts no error and that the no tag matches the CSS selector query.

Example:

	TagNotExists(`TR > TD > A.expandable[href]`)
	TagNotExists(`DIV#main_panel`)
	TagNotExists(`TR TD INPUT[name="x"]`)
*/
func (tc *HomeTestCase) TagNotExists(cssSelectorQuery string) *HomeTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		selector, err := cascadia.Compile(cssSelectorQuery)
		if !testarossa.NoError(tc.t, err, "Invalid selector %s", cssSelectorQuery) {
			return tc
		}
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		doc, err := html.Parse(bytes.NewReader(body))
		if !testarossa.NoError(tc.t, err, "Failed to parse HTML") {
			return tc
		}
		matches := selector.MatchAll(doc)
		testarossa.Equal(tc.t, 0, len(matches), "Found %d tag(s) matching %s", len(matches), cssSelectorQuery)
	}
	return tc
}

/*
TagEqual asserts no error and that the at least one of the tags matching the CSS selector query
either contains the exact text itself or has a descendant that does.

Example:

	TagEqual("TR > TD > A.expandable[href]", "Expand")
	TagEqual("DIV#main_panel > SELECT > OPTION", "Red")
*/
func (tc *HomeTestCase) TagEqual(cssSelectorQuery string, value string) *HomeTestCase {
	var textMatches func(n *html.Node) bool
	textMatches = func(n *html.Node) bool {
		for x := n.FirstChild; x != nil; x = x.NextSibling {
			if x.Data == value || textMatches(x) {
				return true
			}
		}
		return false
	}

	if testarossa.NoError(tc.t, tc.err) {
		selector, err := cascadia.Compile(cssSelectorQuery)
		if !testarossa.NoError(tc.t, err, "Invalid selector %s", cssSelectorQuery) {
			return tc
		}
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		doc, err := html.Parse(bytes.NewReader(body))
		if !testarossa.NoError(tc.t, err, "Failed to parse HTML") {
			return tc
		}
		matches := selector.MatchAll(doc)
		if !testarossa.NotEqual(tc.t, 0, len(matches), "Selector %s does not match any tags", cssSelectorQuery) {
			return tc
		}
		if value == "" {
			return tc
		}
		found := false
		for _, match := range matches {
			if textMatches(match) {
				found = true
				break
			}
		}
		testarossa.True(tc.t, found, "No tag matching %s contains %s", cssSelectorQuery, value)
	}
	return tc
}

/*
TagContains asserts no error and that the at least one of the tags matching the CSS selector query
either contains the text itself or has a descendant that does.

Example:

	TagContains("TR > TD > A.expandable[href]", "Expand")
	TagContains("DIV#main_panel > SELECT > OPTION", "Red")
*/
func (tc *HomeTestCase) TagContains(cssSelectorQuery string, value string) *HomeTestCase {
	var textMatches func(n *html.Node) bool
	textMatches = func(n *html.Node) bool {
		for x := n.FirstChild; x != nil; x = x.NextSibling {
			if strings.Contains(x.Data, value) || textMatches(x) {
				return true
			}
		}
		return false
	}

	if testarossa.NoError(tc.t, tc.err) {
		selector, err := cascadia.Compile(cssSelectorQuery)
		if !testarossa.NoError(tc.t, err, "Invalid selector %s", cssSelectorQuery) {
			return tc
		}
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		doc, err := html.Parse(bytes.NewReader(body))
		if !testarossa.NoError(tc.t, err, "Failed to parse HTML") {
			return tc
		}
		matches := selector.MatchAll(doc)
		if !testarossa.NotEqual(tc.t, 0, len(matches), "Selector %s does not match any tags", cssSelectorQuery) {
			return tc
		}
		if value == "" {
			return tc
		}
		found := false
		for _, match := range matches {
			if textMatches(match) {
				found = true
				break
			}
		}
		testarossa.True(tc.t, found, "No tag matching %s contains %s", cssSelectorQuery, value)
	}
	return tc
}

/*
TagNotEqual asserts no error and that there is no tag matching the CSS selector that
either contains the exact text itself or has a descendant that does.

Example:

	TagNotEqual("TR > TD > A[href]", "Harry Potter")
	TagNotEqual("DIV#main_panel > SELECT > OPTION", "Red")
*/
func (tc *HomeTestCase) TagNotEqual(cssSelectorQuery string, value string) *HomeTestCase {
	var textMatches func(n *html.Node) bool
	textMatches = func(n *html.Node) bool {
		for x := n.FirstChild; x != nil; x = x.NextSibling {
			if x.Data == value || textMatches(x) {
				return true
			}
		}
		return false
	}

	if testarossa.NoError(tc.t, tc.err) {
		selector, err := cascadia.Compile(cssSelectorQuery)
		if !testarossa.NoError(tc.t, err, "Invalid selector %s", cssSelectorQuery) {
			return tc
		}
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		doc, err := html.Parse(bytes.NewReader(body))
		if !testarossa.NoError(tc.t, err, "Failed to parse HTML") {
			return tc
		}
		matches := selector.MatchAll(doc)
		if len(matches) == 0 {
			return tc
		}
		if !testarossa.NotEqual(tc.t, "", value, "Found tag matching %s", cssSelectorQuery) {
			return tc
		}
		found := false
		for _, match := range matches {
			if textMatches(match) {
				found = true
				break
			}
		}
		testarossa.False(tc.t, found, "Found tag matching %s that contains %s", cssSelectorQuery, value)
	}
	return tc
}

/*
TagNotContains asserts no error and that there is no tag matching the CSS selector that
either contains the text itself or has a descendant that does.

Example:

	TagNotContains("TR > TD > A[href]", "Harry Potter")
	TagNotContains("DIV#main_panel > SELECT > OPTION", "Red")
*/
func (tc *HomeTestCase) TagNotContains(cssSelectorQuery string, value string) *HomeTestCase {
	var textMatches func(n *html.Node) bool
	textMatches = func(n *html.Node) bool {
		for x := n.FirstChild; x != nil; x = x.NextSibling {
			if strings.Contains(x.Data, value) || textMatches(x) {
				return true
			}
		}
		return false
	}

	if testarossa.NoError(tc.t, tc.err) {
		selector, err := cascadia.Compile(cssSelectorQuery)
		if !testarossa.NoError(tc.t, err, "Invalid selector %s", cssSelectorQuery) {
			return tc
		}
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		doc, err := html.Parse(bytes.NewReader(body))
		if !testarossa.NoError(tc.t, err, "Failed to parse HTML") {
			return tc
		}
		matches := selector.MatchAll(doc)
		if len(matches) == 0 {
			return tc
		}
		if !testarossa.NotEqual(tc.t, "", value, "Found tag matching %s", cssSelectorQuery) {
			return tc
		}
		found := false
		for _, match := range matches {
			if textMatches(match) {
				found = true
				break
			}
		}
		testarossa.False(tc.t, found, "Found tag matching %s that contains %s", cssSelectorQuery, value)
	}
	return tc
}

// Error asserts an error.
func (tc *HomeTestCase) Error(errContains string) *HomeTestCase {
	if testarossa.Error(tc.t, tc.err) {
		testarossa.Contains(tc.t, tc.err.Error(), errContains)
	}
	return tc
}

// ErrorCode asserts an error by its status code.
func (tc *HomeTestCase) ErrorCode(statusCode int) *HomeTestCase {
	if testarossa.Error(tc.t, tc.err) {
		testarossa.Equal(tc.t, statusCode, errors.Convert(tc.err).StatusCode)
	}
	return tc
}

// NoError asserts no error.
func (tc *HomeTestCase) NoError() *HomeTestCase {
	testarossa.NoError(tc.t, tc.err)
	return tc
}

// CompletedIn checks that the duration of the operation is less than or equal the threshold.
func (tc *HomeTestCase) CompletedIn(threshold time.Duration) *HomeTestCase {
	testarossa.True(tc.t, tc.dur <= threshold)
	return tc
}

// Assert asserts using a provided function.
func (tc *HomeTestCase) Assert(asserter func(t *testing.T, res *http.Response, err error)) *HomeTestCase {
	asserter(tc.t, tc.res, tc.err)
	return tc
}

// Get returns the result of executing Home.
func (tc *HomeTestCase) Get() (res *http.Response, err error) {
	return tc.res, tc.err
}

/*
Home_Get performs a GET request to the Home endpoint.

Home demonstrates making requests using multicast and unicast request/response patterns.

If a URL is not provided, it defaults to the URL of the endpoint. Otherwise, it is resolved relative to the URL of the endpoint.
*/
func Home_Get(t *testing.T, ctx context.Context, url string) *HomeTestCase {
	tc := &HomeTestCase{t: t}
	var err error
	url, err = httpx.ResolveURL(messagingapi.URLOfHome, url)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	url, err = httpx.FillPathArguments(url)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	r, err := http.NewRequest("GET", url, nil)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	ctx = frame.CloneContext(ctx)
	r = r.WithContext(ctx)
	r.Header = frame.Of(ctx).Header()
	w := httpx.NewResponseRecorder()
	t0 := time.Now()
	tc.err = utils.CatchPanic(func() error {
		return Svc.Home(w, r)
	})
	tc.dur = time.Since(t0)
	tc.res = w.Result()
	return tc
}

/*
Home_Post performs a POST request to the Home endpoint.

Home demonstrates making requests using multicast and unicast request/response patterns.

If a URL is not provided, it defaults to the URL of the endpoint. Otherwise, it is resolved relative to the URL of the endpoint.
If the body if of type io.Reader, []byte or string, it is serialized in binary form.
If it is of type url.Values, it is serialized as form data. All other types are serialized as JSON.
If a content type is not explicitly provided, an attempt will be made to derive it from the body.
*/
func Home_Post(t *testing.T, ctx context.Context, url string, contentType string, body any) *HomeTestCase {
	tc := &HomeTestCase{t: t}
	var err error
	url, err = httpx.ResolveURL(messagingapi.URLOfHome, url)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	url, err = httpx.FillPathArguments(url)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	r, err := httpx.NewRequest("POST", url, nil)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	ctx = frame.CloneContext(ctx)
	r = r.WithContext(ctx)
	r.Header = frame.Of(ctx).Header()
	err = httpx.SetRequestBody(r, body)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	if contentType != "" {
		r.Header.Set("Content-Type", contentType)
	}
	w := httpx.NewResponseRecorder()
	t0 := time.Now()
	tc.err = utils.CatchPanic(func() error {
		return Svc.Home(w, r)
	})
	tc.dur = time.Since(t0)
	tc.res = w.Result()
	return tc
}

/*
Home demonstrates making requests using multicast and unicast request/response patterns.

If a request is not provided, it defaults to the URL of the endpoint. Otherwise, it is resolved relative to the URL of the endpoint.
*/
func Home(t *testing.T, r *http.Request) *HomeTestCase {
	tc := &HomeTestCase{t: t}
	var err error
	if r == nil {
		r, err = http.NewRequest(`GET`, "", nil)
		if err != nil {
			tc.err = errors.Trace(err)
			return tc
		}
	}
	url, err := httpx.ResolveURL(messagingapi.URLOfHome, r.URL.String())
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	url, err = httpx.FillPathArguments(url)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	r.URL, err = httpx.ParseURL(url)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	for k, vv := range frame.Of(r.Context()).Header() {
		r.Header[k] = vv
	}
	ctx := frame.ContextWithFrameOf(r.Context(), r.Header)
	r = r.WithContext(ctx)
	w := httpx.NewResponseRecorder()
	t0 := time.Now()
	tc.err = utils.CatchPanic(func() error {
		return Svc.Home(w, r)
	})
	tc.res = w.Result()
	tc.dur = time.Since(t0)
	return tc
}

// NoQueueTestCase assists in asserting against the results of executing NoQueue.
type NoQueueTestCase struct {
	t *testing.T
	dur time.Duration
	res *http.Response
	err error
}

// StatusOK asserts no error and a status code 200.
func (tc *NoQueueTestCase) StatusOK() *NoQueueTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.Equal(tc.t, tc.res.StatusCode, http.StatusOK)
	}
	return tc
}

// StatusCode asserts no error and a status code.
func (tc *NoQueueTestCase) StatusCode(statusCode int) *NoQueueTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.Equal(tc.t, tc.res.StatusCode, statusCode)
	}
	return tc
}

// BodyContains asserts no error and that the response body contains the string or byte array value.
func (tc *NoQueueTestCase) BodyContains(value any) *NoQueueTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		switch v := value.(type) {
		case []byte:
			testarossa.True(tc.t, bytes.Contains(body, v), "%v does not contain %v", body, v)
		case string:
			testarossa.Contains(tc.t, string(body), v)
		default:
			vv := fmt.Sprintf("%v", v)
			testarossa.Contains(tc.t, string(body), vv)
		}
	}
	return tc
}

// BodyNotContains asserts no error and that the response body does not contain the string or byte array value.
func (tc *NoQueueTestCase) BodyNotContains(value any) *NoQueueTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		switch v := value.(type) {
		case []byte:
			testarossa.False(tc.t, bytes.Contains(body, v), "%v contains %v", body, v)
		case string:
			testarossa.NotContains(tc.t, string(body), v)
		default:
			vv := fmt.Sprintf("%v", v)
			testarossa.NotContains(tc.t, string(body), vv)
		}
	}
	return tc
}

// HeaderContains asserts no error and that the named header contains the value.
func (tc *NoQueueTestCase) HeaderContains(headerName string, value string) *NoQueueTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.Contains(tc.t, tc.res.Header.Get(headerName), value)
	}
	return tc
}

// HeaderNotContains asserts no error and that the named header does not contain a string.
func (tc *NoQueueTestCase) HeaderNotContains(headerName string, value string) *NoQueueTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.NotContains(tc.t, tc.res.Header.Get(headerName), value)
	}
	return tc
}

// HeaderEqual asserts no error and that the named header matches the value.
func (tc *NoQueueTestCase) HeaderEqual(headerName string, value string) *NoQueueTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.Equal(tc.t, value, tc.res.Header.Get(headerName))
	}
	return tc
}

// HeaderNotEqual asserts no error and that the named header does not matche the value.
func (tc *NoQueueTestCase) HeaderNotEqual(headerName string, value string) *NoQueueTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.NotEqual(tc.t, value, tc.res.Header.Get(headerName))
	}
	return tc
}

// HeaderExists asserts no error and that the named header exists.
func (tc *NoQueueTestCase) HeaderExists(headerName string) *NoQueueTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.NotEqual(tc.t, 0, len(tc.res.Header.Values(headerName)), "Header %s does not exist", headerName)
	}
	return tc
}

// HeaderNotExists asserts no error and that the named header does not exists.
func (tc *NoQueueTestCase) HeaderNotExists(headerName string) *NoQueueTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.Equal(tc.t, 0, len(tc.res.Header.Values(headerName)), "Header %s exists", headerName)
	}
	return tc
}

// ContentType asserts no error and that the Content-Type header matches the expected value.
func (tc *NoQueueTestCase) ContentType(expected string) *NoQueueTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.Equal(tc.t, expected, tc.res.Header.Get("Content-Type"))
	}
	return tc
}

/*
TagExists asserts no error and that the at least one tag matches the CSS selector query.

Examples:

	TagExists(`TR > TD > A.expandable[href]`)
	TagExists(`DIV#main_panel`)
	TagExists(`TR TD INPUT[name="x"]`)
*/
func (tc *NoQueueTestCase) TagExists(cssSelectorQuery string) *NoQueueTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		selector, err := cascadia.Compile(cssSelectorQuery)
		if !testarossa.NoError(tc.t, err, "Invalid selector %s", cssSelectorQuery) {
			return tc
		}
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		doc, err := html.Parse(bytes.NewReader(body))
		if !testarossa.NoError(tc.t, err, "Failed to parse HTML") {
			return tc
		}
		matches := selector.MatchAll(doc)
		testarossa.NotEqual(tc.t, 0, len(matches), "Found no tags matching %s", cssSelectorQuery)
	}
	return tc
}

/*
TagNotExists asserts no error and that the no tag matches the CSS selector query.

Example:

	TagNotExists(`TR > TD > A.expandable[href]`)
	TagNotExists(`DIV#main_panel`)
	TagNotExists(`TR TD INPUT[name="x"]`)
*/
func (tc *NoQueueTestCase) TagNotExists(cssSelectorQuery string) *NoQueueTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		selector, err := cascadia.Compile(cssSelectorQuery)
		if !testarossa.NoError(tc.t, err, "Invalid selector %s", cssSelectorQuery) {
			return tc
		}
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		doc, err := html.Parse(bytes.NewReader(body))
		if !testarossa.NoError(tc.t, err, "Failed to parse HTML") {
			return tc
		}
		matches := selector.MatchAll(doc)
		testarossa.Equal(tc.t, 0, len(matches), "Found %d tag(s) matching %s", len(matches), cssSelectorQuery)
	}
	return tc
}

/*
TagEqual asserts no error and that the at least one of the tags matching the CSS selector query
either contains the exact text itself or has a descendant that does.

Example:

	TagEqual("TR > TD > A.expandable[href]", "Expand")
	TagEqual("DIV#main_panel > SELECT > OPTION", "Red")
*/
func (tc *NoQueueTestCase) TagEqual(cssSelectorQuery string, value string) *NoQueueTestCase {
	var textMatches func(n *html.Node) bool
	textMatches = func(n *html.Node) bool {
		for x := n.FirstChild; x != nil; x = x.NextSibling {
			if x.Data == value || textMatches(x) {
				return true
			}
		}
		return false
	}

	if testarossa.NoError(tc.t, tc.err) {
		selector, err := cascadia.Compile(cssSelectorQuery)
		if !testarossa.NoError(tc.t, err, "Invalid selector %s", cssSelectorQuery) {
			return tc
		}
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		doc, err := html.Parse(bytes.NewReader(body))
		if !testarossa.NoError(tc.t, err, "Failed to parse HTML") {
			return tc
		}
		matches := selector.MatchAll(doc)
		if !testarossa.NotEqual(tc.t, 0, len(matches), "Selector %s does not match any tags", cssSelectorQuery) {
			return tc
		}
		if value == "" {
			return tc
		}
		found := false
		for _, match := range matches {
			if textMatches(match) {
				found = true
				break
			}
		}
		testarossa.True(tc.t, found, "No tag matching %s contains %s", cssSelectorQuery, value)
	}
	return tc
}

/*
TagContains asserts no error and that the at least one of the tags matching the CSS selector query
either contains the text itself or has a descendant that does.

Example:

	TagContains("TR > TD > A.expandable[href]", "Expand")
	TagContains("DIV#main_panel > SELECT > OPTION", "Red")
*/
func (tc *NoQueueTestCase) TagContains(cssSelectorQuery string, value string) *NoQueueTestCase {
	var textMatches func(n *html.Node) bool
	textMatches = func(n *html.Node) bool {
		for x := n.FirstChild; x != nil; x = x.NextSibling {
			if strings.Contains(x.Data, value) || textMatches(x) {
				return true
			}
		}
		return false
	}

	if testarossa.NoError(tc.t, tc.err) {
		selector, err := cascadia.Compile(cssSelectorQuery)
		if !testarossa.NoError(tc.t, err, "Invalid selector %s", cssSelectorQuery) {
			return tc
		}
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		doc, err := html.Parse(bytes.NewReader(body))
		if !testarossa.NoError(tc.t, err, "Failed to parse HTML") {
			return tc
		}
		matches := selector.MatchAll(doc)
		if !testarossa.NotEqual(tc.t, 0, len(matches), "Selector %s does not match any tags", cssSelectorQuery) {
			return tc
		}
		if value == "" {
			return tc
		}
		found := false
		for _, match := range matches {
			if textMatches(match) {
				found = true
				break
			}
		}
		testarossa.True(tc.t, found, "No tag matching %s contains %s", cssSelectorQuery, value)
	}
	return tc
}

/*
TagNotEqual asserts no error and that there is no tag matching the CSS selector that
either contains the exact text itself or has a descendant that does.

Example:

	TagNotEqual("TR > TD > A[href]", "Harry Potter")
	TagNotEqual("DIV#main_panel > SELECT > OPTION", "Red")
*/
func (tc *NoQueueTestCase) TagNotEqual(cssSelectorQuery string, value string) *NoQueueTestCase {
	var textMatches func(n *html.Node) bool
	textMatches = func(n *html.Node) bool {
		for x := n.FirstChild; x != nil; x = x.NextSibling {
			if x.Data == value || textMatches(x) {
				return true
			}
		}
		return false
	}

	if testarossa.NoError(tc.t, tc.err) {
		selector, err := cascadia.Compile(cssSelectorQuery)
		if !testarossa.NoError(tc.t, err, "Invalid selector %s", cssSelectorQuery) {
			return tc
		}
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		doc, err := html.Parse(bytes.NewReader(body))
		if !testarossa.NoError(tc.t, err, "Failed to parse HTML") {
			return tc
		}
		matches := selector.MatchAll(doc)
		if len(matches) == 0 {
			return tc
		}
		if !testarossa.NotEqual(tc.t, "", value, "Found tag matching %s", cssSelectorQuery) {
			return tc
		}
		found := false
		for _, match := range matches {
			if textMatches(match) {
				found = true
				break
			}
		}
		testarossa.False(tc.t, found, "Found tag matching %s that contains %s", cssSelectorQuery, value)
	}
	return tc
}

/*
TagNotContains asserts no error and that there is no tag matching the CSS selector that
either contains the text itself or has a descendant that does.

Example:

	TagNotContains("TR > TD > A[href]", "Harry Potter")
	TagNotContains("DIV#main_panel > SELECT > OPTION", "Red")
*/
func (tc *NoQueueTestCase) TagNotContains(cssSelectorQuery string, value string) *NoQueueTestCase {
	var textMatches func(n *html.Node) bool
	textMatches = func(n *html.Node) bool {
		for x := n.FirstChild; x != nil; x = x.NextSibling {
			if strings.Contains(x.Data, value) || textMatches(x) {
				return true
			}
		}
		return false
	}

	if testarossa.NoError(tc.t, tc.err) {
		selector, err := cascadia.Compile(cssSelectorQuery)
		if !testarossa.NoError(tc.t, err, "Invalid selector %s", cssSelectorQuery) {
			return tc
		}
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		doc, err := html.Parse(bytes.NewReader(body))
		if !testarossa.NoError(tc.t, err, "Failed to parse HTML") {
			return tc
		}
		matches := selector.MatchAll(doc)
		if len(matches) == 0 {
			return tc
		}
		if !testarossa.NotEqual(tc.t, "", value, "Found tag matching %s", cssSelectorQuery) {
			return tc
		}
		found := false
		for _, match := range matches {
			if textMatches(match) {
				found = true
				break
			}
		}
		testarossa.False(tc.t, found, "Found tag matching %s that contains %s", cssSelectorQuery, value)
	}
	return tc
}

// Error asserts an error.
func (tc *NoQueueTestCase) Error(errContains string) *NoQueueTestCase {
	if testarossa.Error(tc.t, tc.err) {
		testarossa.Contains(tc.t, tc.err.Error(), errContains)
	}
	return tc
}

// ErrorCode asserts an error by its status code.
func (tc *NoQueueTestCase) ErrorCode(statusCode int) *NoQueueTestCase {
	if testarossa.Error(tc.t, tc.err) {
		testarossa.Equal(tc.t, statusCode, errors.Convert(tc.err).StatusCode)
	}
	return tc
}

// NoError asserts no error.
func (tc *NoQueueTestCase) NoError() *NoQueueTestCase {
	testarossa.NoError(tc.t, tc.err)
	return tc
}

// CompletedIn checks that the duration of the operation is less than or equal the threshold.
func (tc *NoQueueTestCase) CompletedIn(threshold time.Duration) *NoQueueTestCase {
	testarossa.True(tc.t, tc.dur <= threshold)
	return tc
}

// Assert asserts using a provided function.
func (tc *NoQueueTestCase) Assert(asserter func(t *testing.T, res *http.Response, err error)) *NoQueueTestCase {
	asserter(tc.t, tc.res, tc.err)
	return tc
}

// Get returns the result of executing NoQueue.
func (tc *NoQueueTestCase) Get() (res *http.Response, err error) {
	return tc.res, tc.err
}

/*
NoQueue_Get performs a GET request to the NoQueue endpoint.

NoQueue demonstrates how the NoQueue subscription option is used to create
a multicast request/response communication pattern.
All instances of this microservice will respond to each request.

If a URL is not provided, it defaults to the URL of the endpoint. Otherwise, it is resolved relative to the URL of the endpoint.
*/
func NoQueue_Get(t *testing.T, ctx context.Context, url string) *NoQueueTestCase {
	tc := &NoQueueTestCase{t: t}
	var err error
	url, err = httpx.ResolveURL(messagingapi.URLOfNoQueue, url)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	url, err = httpx.FillPathArguments(url)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	r, err := http.NewRequest("GET", url, nil)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	ctx = frame.CloneContext(ctx)
	r = r.WithContext(ctx)
	r.Header = frame.Of(ctx).Header()
	w := httpx.NewResponseRecorder()
	t0 := time.Now()
	tc.err = utils.CatchPanic(func() error {
		return Svc.NoQueue(w, r)
	})
	tc.dur = time.Since(t0)
	tc.res = w.Result()
	return tc
}

/*
NoQueue_Post performs a POST request to the NoQueue endpoint.

NoQueue demonstrates how the NoQueue subscription option is used to create
a multicast request/response communication pattern.
All instances of this microservice will respond to each request.

If a URL is not provided, it defaults to the URL of the endpoint. Otherwise, it is resolved relative to the URL of the endpoint.
If the body if of type io.Reader, []byte or string, it is serialized in binary form.
If it is of type url.Values, it is serialized as form data. All other types are serialized as JSON.
If a content type is not explicitly provided, an attempt will be made to derive it from the body.
*/
func NoQueue_Post(t *testing.T, ctx context.Context, url string, contentType string, body any) *NoQueueTestCase {
	tc := &NoQueueTestCase{t: t}
	var err error
	url, err = httpx.ResolveURL(messagingapi.URLOfNoQueue, url)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	url, err = httpx.FillPathArguments(url)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	r, err := httpx.NewRequest("POST", url, nil)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	ctx = frame.CloneContext(ctx)
	r = r.WithContext(ctx)
	r.Header = frame.Of(ctx).Header()
	err = httpx.SetRequestBody(r, body)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	if contentType != "" {
		r.Header.Set("Content-Type", contentType)
	}
	w := httpx.NewResponseRecorder()
	t0 := time.Now()
	tc.err = utils.CatchPanic(func() error {
		return Svc.NoQueue(w, r)
	})
	tc.dur = time.Since(t0)
	tc.res = w.Result()
	return tc
}

/*
NoQueue demonstrates how the NoQueue subscription option is used to create
a multicast request/response communication pattern.
All instances of this microservice will respond to each request.

If a request is not provided, it defaults to the URL of the endpoint. Otherwise, it is resolved relative to the URL of the endpoint.
*/
func NoQueue(t *testing.T, r *http.Request) *NoQueueTestCase {
	tc := &NoQueueTestCase{t: t}
	var err error
	if r == nil {
		r, err = http.NewRequest(`GET`, "", nil)
		if err != nil {
			tc.err = errors.Trace(err)
			return tc
		}
	}
	url, err := httpx.ResolveURL(messagingapi.URLOfNoQueue, r.URL.String())
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	url, err = httpx.FillPathArguments(url)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	r.URL, err = httpx.ParseURL(url)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	for k, vv := range frame.Of(r.Context()).Header() {
		r.Header[k] = vv
	}
	ctx := frame.ContextWithFrameOf(r.Context(), r.Header)
	r = r.WithContext(ctx)
	w := httpx.NewResponseRecorder()
	t0 := time.Now()
	tc.err = utils.CatchPanic(func() error {
		return Svc.NoQueue(w, r)
	})
	tc.res = w.Result()
	tc.dur = time.Since(t0)
	return tc
}

// DefaultQueueTestCase assists in asserting against the results of executing DefaultQueue.
type DefaultQueueTestCase struct {
	t *testing.T
	dur time.Duration
	res *http.Response
	err error
}

// StatusOK asserts no error and a status code 200.
func (tc *DefaultQueueTestCase) StatusOK() *DefaultQueueTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.Equal(tc.t, tc.res.StatusCode, http.StatusOK)
	}
	return tc
}

// StatusCode asserts no error and a status code.
func (tc *DefaultQueueTestCase) StatusCode(statusCode int) *DefaultQueueTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.Equal(tc.t, tc.res.StatusCode, statusCode)
	}
	return tc
}

// BodyContains asserts no error and that the response body contains the string or byte array value.
func (tc *DefaultQueueTestCase) BodyContains(value any) *DefaultQueueTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		switch v := value.(type) {
		case []byte:
			testarossa.True(tc.t, bytes.Contains(body, v), "%v does not contain %v", body, v)
		case string:
			testarossa.Contains(tc.t, string(body), v)
		default:
			vv := fmt.Sprintf("%v", v)
			testarossa.Contains(tc.t, string(body), vv)
		}
	}
	return tc
}

// BodyNotContains asserts no error and that the response body does not contain the string or byte array value.
func (tc *DefaultQueueTestCase) BodyNotContains(value any) *DefaultQueueTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		switch v := value.(type) {
		case []byte:
			testarossa.False(tc.t, bytes.Contains(body, v), "%v contains %v", body, v)
		case string:
			testarossa.NotContains(tc.t, string(body), v)
		default:
			vv := fmt.Sprintf("%v", v)
			testarossa.NotContains(tc.t, string(body), vv)
		}
	}
	return tc
}

// HeaderContains asserts no error and that the named header contains the value.
func (tc *DefaultQueueTestCase) HeaderContains(headerName string, value string) *DefaultQueueTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.Contains(tc.t, tc.res.Header.Get(headerName), value)
	}
	return tc
}

// HeaderNotContains asserts no error and that the named header does not contain a string.
func (tc *DefaultQueueTestCase) HeaderNotContains(headerName string, value string) *DefaultQueueTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.NotContains(tc.t, tc.res.Header.Get(headerName), value)
	}
	return tc
}

// HeaderEqual asserts no error and that the named header matches the value.
func (tc *DefaultQueueTestCase) HeaderEqual(headerName string, value string) *DefaultQueueTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.Equal(tc.t, value, tc.res.Header.Get(headerName))
	}
	return tc
}

// HeaderNotEqual asserts no error and that the named header does not matche the value.
func (tc *DefaultQueueTestCase) HeaderNotEqual(headerName string, value string) *DefaultQueueTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.NotEqual(tc.t, value, tc.res.Header.Get(headerName))
	}
	return tc
}

// HeaderExists asserts no error and that the named header exists.
func (tc *DefaultQueueTestCase) HeaderExists(headerName string) *DefaultQueueTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.NotEqual(tc.t, 0, len(tc.res.Header.Values(headerName)), "Header %s does not exist", headerName)
	}
	return tc
}

// HeaderNotExists asserts no error and that the named header does not exists.
func (tc *DefaultQueueTestCase) HeaderNotExists(headerName string) *DefaultQueueTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.Equal(tc.t, 0, len(tc.res.Header.Values(headerName)), "Header %s exists", headerName)
	}
	return tc
}

// ContentType asserts no error and that the Content-Type header matches the expected value.
func (tc *DefaultQueueTestCase) ContentType(expected string) *DefaultQueueTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.Equal(tc.t, expected, tc.res.Header.Get("Content-Type"))
	}
	return tc
}

/*
TagExists asserts no error and that the at least one tag matches the CSS selector query.

Examples:

	TagExists(`TR > TD > A.expandable[href]`)
	TagExists(`DIV#main_panel`)
	TagExists(`TR TD INPUT[name="x"]`)
*/
func (tc *DefaultQueueTestCase) TagExists(cssSelectorQuery string) *DefaultQueueTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		selector, err := cascadia.Compile(cssSelectorQuery)
		if !testarossa.NoError(tc.t, err, "Invalid selector %s", cssSelectorQuery) {
			return tc
		}
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		doc, err := html.Parse(bytes.NewReader(body))
		if !testarossa.NoError(tc.t, err, "Failed to parse HTML") {
			return tc
		}
		matches := selector.MatchAll(doc)
		testarossa.NotEqual(tc.t, 0, len(matches), "Found no tags matching %s", cssSelectorQuery)
	}
	return tc
}

/*
TagNotExists asserts no error and that the no tag matches the CSS selector query.

Example:

	TagNotExists(`TR > TD > A.expandable[href]`)
	TagNotExists(`DIV#main_panel`)
	TagNotExists(`TR TD INPUT[name="x"]`)
*/
func (tc *DefaultQueueTestCase) TagNotExists(cssSelectorQuery string) *DefaultQueueTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		selector, err := cascadia.Compile(cssSelectorQuery)
		if !testarossa.NoError(tc.t, err, "Invalid selector %s", cssSelectorQuery) {
			return tc
		}
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		doc, err := html.Parse(bytes.NewReader(body))
		if !testarossa.NoError(tc.t, err, "Failed to parse HTML") {
			return tc
		}
		matches := selector.MatchAll(doc)
		testarossa.Equal(tc.t, 0, len(matches), "Found %d tag(s) matching %s", len(matches), cssSelectorQuery)
	}
	return tc
}

/*
TagEqual asserts no error and that the at least one of the tags matching the CSS selector query
either contains the exact text itself or has a descendant that does.

Example:

	TagEqual("TR > TD > A.expandable[href]", "Expand")
	TagEqual("DIV#main_panel > SELECT > OPTION", "Red")
*/
func (tc *DefaultQueueTestCase) TagEqual(cssSelectorQuery string, value string) *DefaultQueueTestCase {
	var textMatches func(n *html.Node) bool
	textMatches = func(n *html.Node) bool {
		for x := n.FirstChild; x != nil; x = x.NextSibling {
			if x.Data == value || textMatches(x) {
				return true
			}
		}
		return false
	}

	if testarossa.NoError(tc.t, tc.err) {
		selector, err := cascadia.Compile(cssSelectorQuery)
		if !testarossa.NoError(tc.t, err, "Invalid selector %s", cssSelectorQuery) {
			return tc
		}
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		doc, err := html.Parse(bytes.NewReader(body))
		if !testarossa.NoError(tc.t, err, "Failed to parse HTML") {
			return tc
		}
		matches := selector.MatchAll(doc)
		if !testarossa.NotEqual(tc.t, 0, len(matches), "Selector %s does not match any tags", cssSelectorQuery) {
			return tc
		}
		if value == "" {
			return tc
		}
		found := false
		for _, match := range matches {
			if textMatches(match) {
				found = true
				break
			}
		}
		testarossa.True(tc.t, found, "No tag matching %s contains %s", cssSelectorQuery, value)
	}
	return tc
}

/*
TagContains asserts no error and that the at least one of the tags matching the CSS selector query
either contains the text itself or has a descendant that does.

Example:

	TagContains("TR > TD > A.expandable[href]", "Expand")
	TagContains("DIV#main_panel > SELECT > OPTION", "Red")
*/
func (tc *DefaultQueueTestCase) TagContains(cssSelectorQuery string, value string) *DefaultQueueTestCase {
	var textMatches func(n *html.Node) bool
	textMatches = func(n *html.Node) bool {
		for x := n.FirstChild; x != nil; x = x.NextSibling {
			if strings.Contains(x.Data, value) || textMatches(x) {
				return true
			}
		}
		return false
	}

	if testarossa.NoError(tc.t, tc.err) {
		selector, err := cascadia.Compile(cssSelectorQuery)
		if !testarossa.NoError(tc.t, err, "Invalid selector %s", cssSelectorQuery) {
			return tc
		}
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		doc, err := html.Parse(bytes.NewReader(body))
		if !testarossa.NoError(tc.t, err, "Failed to parse HTML") {
			return tc
		}
		matches := selector.MatchAll(doc)
		if !testarossa.NotEqual(tc.t, 0, len(matches), "Selector %s does not match any tags", cssSelectorQuery) {
			return tc
		}
		if value == "" {
			return tc
		}
		found := false
		for _, match := range matches {
			if textMatches(match) {
				found = true
				break
			}
		}
		testarossa.True(tc.t, found, "No tag matching %s contains %s", cssSelectorQuery, value)
	}
	return tc
}

/*
TagNotEqual asserts no error and that there is no tag matching the CSS selector that
either contains the exact text itself or has a descendant that does.

Example:

	TagNotEqual("TR > TD > A[href]", "Harry Potter")
	TagNotEqual("DIV#main_panel > SELECT > OPTION", "Red")
*/
func (tc *DefaultQueueTestCase) TagNotEqual(cssSelectorQuery string, value string) *DefaultQueueTestCase {
	var textMatches func(n *html.Node) bool
	textMatches = func(n *html.Node) bool {
		for x := n.FirstChild; x != nil; x = x.NextSibling {
			if x.Data == value || textMatches(x) {
				return true
			}
		}
		return false
	}

	if testarossa.NoError(tc.t, tc.err) {
		selector, err := cascadia.Compile(cssSelectorQuery)
		if !testarossa.NoError(tc.t, err, "Invalid selector %s", cssSelectorQuery) {
			return tc
		}
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		doc, err := html.Parse(bytes.NewReader(body))
		if !testarossa.NoError(tc.t, err, "Failed to parse HTML") {
			return tc
		}
		matches := selector.MatchAll(doc)
		if len(matches) == 0 {
			return tc
		}
		if !testarossa.NotEqual(tc.t, "", value, "Found tag matching %s", cssSelectorQuery) {
			return tc
		}
		found := false
		for _, match := range matches {
			if textMatches(match) {
				found = true
				break
			}
		}
		testarossa.False(tc.t, found, "Found tag matching %s that contains %s", cssSelectorQuery, value)
	}
	return tc
}

/*
TagNotContains asserts no error and that there is no tag matching the CSS selector that
either contains the text itself or has a descendant that does.

Example:

	TagNotContains("TR > TD > A[href]", "Harry Potter")
	TagNotContains("DIV#main_panel > SELECT > OPTION", "Red")
*/
func (tc *DefaultQueueTestCase) TagNotContains(cssSelectorQuery string, value string) *DefaultQueueTestCase {
	var textMatches func(n *html.Node) bool
	textMatches = func(n *html.Node) bool {
		for x := n.FirstChild; x != nil; x = x.NextSibling {
			if strings.Contains(x.Data, value) || textMatches(x) {
				return true
			}
		}
		return false
	}

	if testarossa.NoError(tc.t, tc.err) {
		selector, err := cascadia.Compile(cssSelectorQuery)
		if !testarossa.NoError(tc.t, err, "Invalid selector %s", cssSelectorQuery) {
			return tc
		}
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		doc, err := html.Parse(bytes.NewReader(body))
		if !testarossa.NoError(tc.t, err, "Failed to parse HTML") {
			return tc
		}
		matches := selector.MatchAll(doc)
		if len(matches) == 0 {
			return tc
		}
		if !testarossa.NotEqual(tc.t, "", value, "Found tag matching %s", cssSelectorQuery) {
			return tc
		}
		found := false
		for _, match := range matches {
			if textMatches(match) {
				found = true
				break
			}
		}
		testarossa.False(tc.t, found, "Found tag matching %s that contains %s", cssSelectorQuery, value)
	}
	return tc
}

// Error asserts an error.
func (tc *DefaultQueueTestCase) Error(errContains string) *DefaultQueueTestCase {
	if testarossa.Error(tc.t, tc.err) {
		testarossa.Contains(tc.t, tc.err.Error(), errContains)
	}
	return tc
}

// ErrorCode asserts an error by its status code.
func (tc *DefaultQueueTestCase) ErrorCode(statusCode int) *DefaultQueueTestCase {
	if testarossa.Error(tc.t, tc.err) {
		testarossa.Equal(tc.t, statusCode, errors.Convert(tc.err).StatusCode)
	}
	return tc
}

// NoError asserts no error.
func (tc *DefaultQueueTestCase) NoError() *DefaultQueueTestCase {
	testarossa.NoError(tc.t, tc.err)
	return tc
}

// CompletedIn checks that the duration of the operation is less than or equal the threshold.
func (tc *DefaultQueueTestCase) CompletedIn(threshold time.Duration) *DefaultQueueTestCase {
	testarossa.True(tc.t, tc.dur <= threshold)
	return tc
}

// Assert asserts using a provided function.
func (tc *DefaultQueueTestCase) Assert(asserter func(t *testing.T, res *http.Response, err error)) *DefaultQueueTestCase {
	asserter(tc.t, tc.res, tc.err)
	return tc
}

// Get returns the result of executing DefaultQueue.
func (tc *DefaultQueueTestCase) Get() (res *http.Response, err error) {
	return tc.res, tc.err
}

/*
DefaultQueue_Get performs a GET request to the DefaultQueue endpoint.

DefaultQueue demonstrates how the DefaultQueue subscription option is used to create
a unicast request/response communication pattern.
Only one of the instances of this microservice will respond to each request.

If a URL is not provided, it defaults to the URL of the endpoint. Otherwise, it is resolved relative to the URL of the endpoint.
*/
func DefaultQueue_Get(t *testing.T, ctx context.Context, url string) *DefaultQueueTestCase {
	tc := &DefaultQueueTestCase{t: t}
	var err error
	url, err = httpx.ResolveURL(messagingapi.URLOfDefaultQueue, url)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	url, err = httpx.FillPathArguments(url)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	r, err := http.NewRequest("GET", url, nil)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	ctx = frame.CloneContext(ctx)
	r = r.WithContext(ctx)
	r.Header = frame.Of(ctx).Header()
	w := httpx.NewResponseRecorder()
	t0 := time.Now()
	tc.err = utils.CatchPanic(func() error {
		return Svc.DefaultQueue(w, r)
	})
	tc.dur = time.Since(t0)
	tc.res = w.Result()
	return tc
}

/*
DefaultQueue_Post performs a POST request to the DefaultQueue endpoint.

DefaultQueue demonstrates how the DefaultQueue subscription option is used to create
a unicast request/response communication pattern.
Only one of the instances of this microservice will respond to each request.

If a URL is not provided, it defaults to the URL of the endpoint. Otherwise, it is resolved relative to the URL of the endpoint.
If the body if of type io.Reader, []byte or string, it is serialized in binary form.
If it is of type url.Values, it is serialized as form data. All other types are serialized as JSON.
If a content type is not explicitly provided, an attempt will be made to derive it from the body.
*/
func DefaultQueue_Post(t *testing.T, ctx context.Context, url string, contentType string, body any) *DefaultQueueTestCase {
	tc := &DefaultQueueTestCase{t: t}
	var err error
	url, err = httpx.ResolveURL(messagingapi.URLOfDefaultQueue, url)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	url, err = httpx.FillPathArguments(url)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	r, err := httpx.NewRequest("POST", url, nil)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	ctx = frame.CloneContext(ctx)
	r = r.WithContext(ctx)
	r.Header = frame.Of(ctx).Header()
	err = httpx.SetRequestBody(r, body)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	if contentType != "" {
		r.Header.Set("Content-Type", contentType)
	}
	w := httpx.NewResponseRecorder()
	t0 := time.Now()
	tc.err = utils.CatchPanic(func() error {
		return Svc.DefaultQueue(w, r)
	})
	tc.dur = time.Since(t0)
	tc.res = w.Result()
	return tc
}

/*
DefaultQueue demonstrates how the DefaultQueue subscription option is used to create
a unicast request/response communication pattern.
Only one of the instances of this microservice will respond to each request.

If a request is not provided, it defaults to the URL of the endpoint. Otherwise, it is resolved relative to the URL of the endpoint.
*/
func DefaultQueue(t *testing.T, r *http.Request) *DefaultQueueTestCase {
	tc := &DefaultQueueTestCase{t: t}
	var err error
	if r == nil {
		r, err = http.NewRequest(`GET`, "", nil)
		if err != nil {
			tc.err = errors.Trace(err)
			return tc
		}
	}
	url, err := httpx.ResolveURL(messagingapi.URLOfDefaultQueue, r.URL.String())
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	url, err = httpx.FillPathArguments(url)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	r.URL, err = httpx.ParseURL(url)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	for k, vv := range frame.Of(r.Context()).Header() {
		r.Header[k] = vv
	}
	ctx := frame.ContextWithFrameOf(r.Context(), r.Header)
	r = r.WithContext(ctx)
	w := httpx.NewResponseRecorder()
	t0 := time.Now()
	tc.err = utils.CatchPanic(func() error {
		return Svc.DefaultQueue(w, r)
	})
	tc.res = w.Result()
	tc.dur = time.Since(t0)
	return tc
}

// CacheLoadTestCase assists in asserting against the results of executing CacheLoad.
type CacheLoadTestCase struct {
	t *testing.T
	dur time.Duration
	res *http.Response
	err error
}

// StatusOK asserts no error and a status code 200.
func (tc *CacheLoadTestCase) StatusOK() *CacheLoadTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.Equal(tc.t, tc.res.StatusCode, http.StatusOK)
	}
	return tc
}

// StatusCode asserts no error and a status code.
func (tc *CacheLoadTestCase) StatusCode(statusCode int) *CacheLoadTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.Equal(tc.t, tc.res.StatusCode, statusCode)
	}
	return tc
}

// BodyContains asserts no error and that the response body contains the string or byte array value.
func (tc *CacheLoadTestCase) BodyContains(value any) *CacheLoadTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		switch v := value.(type) {
		case []byte:
			testarossa.True(tc.t, bytes.Contains(body, v), "%v does not contain %v", body, v)
		case string:
			testarossa.Contains(tc.t, string(body), v)
		default:
			vv := fmt.Sprintf("%v", v)
			testarossa.Contains(tc.t, string(body), vv)
		}
	}
	return tc
}

// BodyNotContains asserts no error and that the response body does not contain the string or byte array value.
func (tc *CacheLoadTestCase) BodyNotContains(value any) *CacheLoadTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		switch v := value.(type) {
		case []byte:
			testarossa.False(tc.t, bytes.Contains(body, v), "%v contains %v", body, v)
		case string:
			testarossa.NotContains(tc.t, string(body), v)
		default:
			vv := fmt.Sprintf("%v", v)
			testarossa.NotContains(tc.t, string(body), vv)
		}
	}
	return tc
}

// HeaderContains asserts no error and that the named header contains the value.
func (tc *CacheLoadTestCase) HeaderContains(headerName string, value string) *CacheLoadTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.Contains(tc.t, tc.res.Header.Get(headerName), value)
	}
	return tc
}

// HeaderNotContains asserts no error and that the named header does not contain a string.
func (tc *CacheLoadTestCase) HeaderNotContains(headerName string, value string) *CacheLoadTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.NotContains(tc.t, tc.res.Header.Get(headerName), value)
	}
	return tc
}

// HeaderEqual asserts no error and that the named header matches the value.
func (tc *CacheLoadTestCase) HeaderEqual(headerName string, value string) *CacheLoadTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.Equal(tc.t, value, tc.res.Header.Get(headerName))
	}
	return tc
}

// HeaderNotEqual asserts no error and that the named header does not matche the value.
func (tc *CacheLoadTestCase) HeaderNotEqual(headerName string, value string) *CacheLoadTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.NotEqual(tc.t, value, tc.res.Header.Get(headerName))
	}
	return tc
}

// HeaderExists asserts no error and that the named header exists.
func (tc *CacheLoadTestCase) HeaderExists(headerName string) *CacheLoadTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.NotEqual(tc.t, 0, len(tc.res.Header.Values(headerName)), "Header %s does not exist", headerName)
	}
	return tc
}

// HeaderNotExists asserts no error and that the named header does not exists.
func (tc *CacheLoadTestCase) HeaderNotExists(headerName string) *CacheLoadTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.Equal(tc.t, 0, len(tc.res.Header.Values(headerName)), "Header %s exists", headerName)
	}
	return tc
}

// ContentType asserts no error and that the Content-Type header matches the expected value.
func (tc *CacheLoadTestCase) ContentType(expected string) *CacheLoadTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.Equal(tc.t, expected, tc.res.Header.Get("Content-Type"))
	}
	return tc
}

/*
TagExists asserts no error and that the at least one tag matches the CSS selector query.

Examples:

	TagExists(`TR > TD > A.expandable[href]`)
	TagExists(`DIV#main_panel`)
	TagExists(`TR TD INPUT[name="x"]`)
*/
func (tc *CacheLoadTestCase) TagExists(cssSelectorQuery string) *CacheLoadTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		selector, err := cascadia.Compile(cssSelectorQuery)
		if !testarossa.NoError(tc.t, err, "Invalid selector %s", cssSelectorQuery) {
			return tc
		}
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		doc, err := html.Parse(bytes.NewReader(body))
		if !testarossa.NoError(tc.t, err, "Failed to parse HTML") {
			return tc
		}
		matches := selector.MatchAll(doc)
		testarossa.NotEqual(tc.t, 0, len(matches), "Found no tags matching %s", cssSelectorQuery)
	}
	return tc
}

/*
TagNotExists asserts no error and that the no tag matches the CSS selector query.

Example:

	TagNotExists(`TR > TD > A.expandable[href]`)
	TagNotExists(`DIV#main_panel`)
	TagNotExists(`TR TD INPUT[name="x"]`)
*/
func (tc *CacheLoadTestCase) TagNotExists(cssSelectorQuery string) *CacheLoadTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		selector, err := cascadia.Compile(cssSelectorQuery)
		if !testarossa.NoError(tc.t, err, "Invalid selector %s", cssSelectorQuery) {
			return tc
		}
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		doc, err := html.Parse(bytes.NewReader(body))
		if !testarossa.NoError(tc.t, err, "Failed to parse HTML") {
			return tc
		}
		matches := selector.MatchAll(doc)
		testarossa.Equal(tc.t, 0, len(matches), "Found %d tag(s) matching %s", len(matches), cssSelectorQuery)
	}
	return tc
}

/*
TagEqual asserts no error and that the at least one of the tags matching the CSS selector query
either contains the exact text itself or has a descendant that does.

Example:

	TagEqual("TR > TD > A.expandable[href]", "Expand")
	TagEqual("DIV#main_panel > SELECT > OPTION", "Red")
*/
func (tc *CacheLoadTestCase) TagEqual(cssSelectorQuery string, value string) *CacheLoadTestCase {
	var textMatches func(n *html.Node) bool
	textMatches = func(n *html.Node) bool {
		for x := n.FirstChild; x != nil; x = x.NextSibling {
			if x.Data == value || textMatches(x) {
				return true
			}
		}
		return false
	}

	if testarossa.NoError(tc.t, tc.err) {
		selector, err := cascadia.Compile(cssSelectorQuery)
		if !testarossa.NoError(tc.t, err, "Invalid selector %s", cssSelectorQuery) {
			return tc
		}
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		doc, err := html.Parse(bytes.NewReader(body))
		if !testarossa.NoError(tc.t, err, "Failed to parse HTML") {
			return tc
		}
		matches := selector.MatchAll(doc)
		if !testarossa.NotEqual(tc.t, 0, len(matches), "Selector %s does not match any tags", cssSelectorQuery) {
			return tc
		}
		if value == "" {
			return tc
		}
		found := false
		for _, match := range matches {
			if textMatches(match) {
				found = true
				break
			}
		}
		testarossa.True(tc.t, found, "No tag matching %s contains %s", cssSelectorQuery, value)
	}
	return tc
}

/*
TagContains asserts no error and that the at least one of the tags matching the CSS selector query
either contains the text itself or has a descendant that does.

Example:

	TagContains("TR > TD > A.expandable[href]", "Expand")
	TagContains("DIV#main_panel > SELECT > OPTION", "Red")
*/
func (tc *CacheLoadTestCase) TagContains(cssSelectorQuery string, value string) *CacheLoadTestCase {
	var textMatches func(n *html.Node) bool
	textMatches = func(n *html.Node) bool {
		for x := n.FirstChild; x != nil; x = x.NextSibling {
			if strings.Contains(x.Data, value) || textMatches(x) {
				return true
			}
		}
		return false
	}

	if testarossa.NoError(tc.t, tc.err) {
		selector, err := cascadia.Compile(cssSelectorQuery)
		if !testarossa.NoError(tc.t, err, "Invalid selector %s", cssSelectorQuery) {
			return tc
		}
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		doc, err := html.Parse(bytes.NewReader(body))
		if !testarossa.NoError(tc.t, err, "Failed to parse HTML") {
			return tc
		}
		matches := selector.MatchAll(doc)
		if !testarossa.NotEqual(tc.t, 0, len(matches), "Selector %s does not match any tags", cssSelectorQuery) {
			return tc
		}
		if value == "" {
			return tc
		}
		found := false
		for _, match := range matches {
			if textMatches(match) {
				found = true
				break
			}
		}
		testarossa.True(tc.t, found, "No tag matching %s contains %s", cssSelectorQuery, value)
	}
	return tc
}

/*
TagNotEqual asserts no error and that there is no tag matching the CSS selector that
either contains the exact text itself or has a descendant that does.

Example:

	TagNotEqual("TR > TD > A[href]", "Harry Potter")
	TagNotEqual("DIV#main_panel > SELECT > OPTION", "Red")
*/
func (tc *CacheLoadTestCase) TagNotEqual(cssSelectorQuery string, value string) *CacheLoadTestCase {
	var textMatches func(n *html.Node) bool
	textMatches = func(n *html.Node) bool {
		for x := n.FirstChild; x != nil; x = x.NextSibling {
			if x.Data == value || textMatches(x) {
				return true
			}
		}
		return false
	}

	if testarossa.NoError(tc.t, tc.err) {
		selector, err := cascadia.Compile(cssSelectorQuery)
		if !testarossa.NoError(tc.t, err, "Invalid selector %s", cssSelectorQuery) {
			return tc
		}
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		doc, err := html.Parse(bytes.NewReader(body))
		if !testarossa.NoError(tc.t, err, "Failed to parse HTML") {
			return tc
		}
		matches := selector.MatchAll(doc)
		if len(matches) == 0 {
			return tc
		}
		if !testarossa.NotEqual(tc.t, "", value, "Found tag matching %s", cssSelectorQuery) {
			return tc
		}
		found := false
		for _, match := range matches {
			if textMatches(match) {
				found = true
				break
			}
		}
		testarossa.False(tc.t, found, "Found tag matching %s that contains %s", cssSelectorQuery, value)
	}
	return tc
}

/*
TagNotContains asserts no error and that there is no tag matching the CSS selector that
either contains the text itself or has a descendant that does.

Example:

	TagNotContains("TR > TD > A[href]", "Harry Potter")
	TagNotContains("DIV#main_panel > SELECT > OPTION", "Red")
*/
func (tc *CacheLoadTestCase) TagNotContains(cssSelectorQuery string, value string) *CacheLoadTestCase {
	var textMatches func(n *html.Node) bool
	textMatches = func(n *html.Node) bool {
		for x := n.FirstChild; x != nil; x = x.NextSibling {
			if strings.Contains(x.Data, value) || textMatches(x) {
				return true
			}
		}
		return false
	}

	if testarossa.NoError(tc.t, tc.err) {
		selector, err := cascadia.Compile(cssSelectorQuery)
		if !testarossa.NoError(tc.t, err, "Invalid selector %s", cssSelectorQuery) {
			return tc
		}
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		doc, err := html.Parse(bytes.NewReader(body))
		if !testarossa.NoError(tc.t, err, "Failed to parse HTML") {
			return tc
		}
		matches := selector.MatchAll(doc)
		if len(matches) == 0 {
			return tc
		}
		if !testarossa.NotEqual(tc.t, "", value, "Found tag matching %s", cssSelectorQuery) {
			return tc
		}
		found := false
		for _, match := range matches {
			if textMatches(match) {
				found = true
				break
			}
		}
		testarossa.False(tc.t, found, "Found tag matching %s that contains %s", cssSelectorQuery, value)
	}
	return tc
}

// Error asserts an error.
func (tc *CacheLoadTestCase) Error(errContains string) *CacheLoadTestCase {
	if testarossa.Error(tc.t, tc.err) {
		testarossa.Contains(tc.t, tc.err.Error(), errContains)
	}
	return tc
}

// ErrorCode asserts an error by its status code.
func (tc *CacheLoadTestCase) ErrorCode(statusCode int) *CacheLoadTestCase {
	if testarossa.Error(tc.t, tc.err) {
		testarossa.Equal(tc.t, statusCode, errors.Convert(tc.err).StatusCode)
	}
	return tc
}

// NoError asserts no error.
func (tc *CacheLoadTestCase) NoError() *CacheLoadTestCase {
	testarossa.NoError(tc.t, tc.err)
	return tc
}

// CompletedIn checks that the duration of the operation is less than or equal the threshold.
func (tc *CacheLoadTestCase) CompletedIn(threshold time.Duration) *CacheLoadTestCase {
	testarossa.True(tc.t, tc.dur <= threshold)
	return tc
}

// Assert asserts using a provided function.
func (tc *CacheLoadTestCase) Assert(asserter func(t *testing.T, res *http.Response, err error)) *CacheLoadTestCase {
	asserter(tc.t, tc.res, tc.err)
	return tc
}

// Get returns the result of executing CacheLoad.
func (tc *CacheLoadTestCase) Get() (res *http.Response, err error) {
	return tc.res, tc.err
}

/*
CacheLoad_Get performs a GET request to the CacheLoad endpoint.

CacheLoad looks up an element in the distributed cache of the microservice.

If a URL is not provided, it defaults to the URL of the endpoint. Otherwise, it is resolved relative to the URL of the endpoint.
*/
func CacheLoad_Get(t *testing.T, ctx context.Context, url string) *CacheLoadTestCase {
	tc := &CacheLoadTestCase{t: t}
	var err error
	url, err = httpx.ResolveURL(messagingapi.URLOfCacheLoad, url)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	url, err = httpx.FillPathArguments(url)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	r, err := http.NewRequest("GET", url, nil)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	ctx = frame.CloneContext(ctx)
	r = r.WithContext(ctx)
	r.Header = frame.Of(ctx).Header()
	w := httpx.NewResponseRecorder()
	t0 := time.Now()
	tc.err = utils.CatchPanic(func() error {
		return Svc.CacheLoad(w, r)
	})
	tc.dur = time.Since(t0)
	tc.res = w.Result()
	return tc
}

/*
CacheLoad_Post performs a POST request to the CacheLoad endpoint.

CacheLoad looks up an element in the distributed cache of the microservice.

If a URL is not provided, it defaults to the URL of the endpoint. Otherwise, it is resolved relative to the URL of the endpoint.
If the body if of type io.Reader, []byte or string, it is serialized in binary form.
If it is of type url.Values, it is serialized as form data. All other types are serialized as JSON.
If a content type is not explicitly provided, an attempt will be made to derive it from the body.
*/
func CacheLoad_Post(t *testing.T, ctx context.Context, url string, contentType string, body any) *CacheLoadTestCase {
	tc := &CacheLoadTestCase{t: t}
	var err error
	url, err = httpx.ResolveURL(messagingapi.URLOfCacheLoad, url)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	url, err = httpx.FillPathArguments(url)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	r, err := httpx.NewRequest("POST", url, nil)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	ctx = frame.CloneContext(ctx)
	r = r.WithContext(ctx)
	r.Header = frame.Of(ctx).Header()
	err = httpx.SetRequestBody(r, body)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	if contentType != "" {
		r.Header.Set("Content-Type", contentType)
	}
	w := httpx.NewResponseRecorder()
	t0 := time.Now()
	tc.err = utils.CatchPanic(func() error {
		return Svc.CacheLoad(w, r)
	})
	tc.dur = time.Since(t0)
	tc.res = w.Result()
	return tc
}

/*
CacheLoad looks up an element in the distributed cache of the microservice.

If a request is not provided, it defaults to the URL of the endpoint. Otherwise, it is resolved relative to the URL of the endpoint.
*/
func CacheLoad(t *testing.T, r *http.Request) *CacheLoadTestCase {
	tc := &CacheLoadTestCase{t: t}
	var err error
	if r == nil {
		r, err = http.NewRequest(`GET`, "", nil)
		if err != nil {
			tc.err = errors.Trace(err)
			return tc
		}
	}
	url, err := httpx.ResolveURL(messagingapi.URLOfCacheLoad, r.URL.String())
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	url, err = httpx.FillPathArguments(url)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	r.URL, err = httpx.ParseURL(url)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	for k, vv := range frame.Of(r.Context()).Header() {
		r.Header[k] = vv
	}
	ctx := frame.ContextWithFrameOf(r.Context(), r.Header)
	r = r.WithContext(ctx)
	w := httpx.NewResponseRecorder()
	t0 := time.Now()
	tc.err = utils.CatchPanic(func() error {
		return Svc.CacheLoad(w, r)
	})
	tc.res = w.Result()
	tc.dur = time.Since(t0)
	return tc
}

// CacheStoreTestCase assists in asserting against the results of executing CacheStore.
type CacheStoreTestCase struct {
	t *testing.T
	dur time.Duration
	res *http.Response
	err error
}

// StatusOK asserts no error and a status code 200.
func (tc *CacheStoreTestCase) StatusOK() *CacheStoreTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.Equal(tc.t, tc.res.StatusCode, http.StatusOK)
	}
	return tc
}

// StatusCode asserts no error and a status code.
func (tc *CacheStoreTestCase) StatusCode(statusCode int) *CacheStoreTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.Equal(tc.t, tc.res.StatusCode, statusCode)
	}
	return tc
}

// BodyContains asserts no error and that the response body contains the string or byte array value.
func (tc *CacheStoreTestCase) BodyContains(value any) *CacheStoreTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		switch v := value.(type) {
		case []byte:
			testarossa.True(tc.t, bytes.Contains(body, v), "%v does not contain %v", body, v)
		case string:
			testarossa.Contains(tc.t, string(body), v)
		default:
			vv := fmt.Sprintf("%v", v)
			testarossa.Contains(tc.t, string(body), vv)
		}
	}
	return tc
}

// BodyNotContains asserts no error and that the response body does not contain the string or byte array value.
func (tc *CacheStoreTestCase) BodyNotContains(value any) *CacheStoreTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		switch v := value.(type) {
		case []byte:
			testarossa.False(tc.t, bytes.Contains(body, v), "%v contains %v", body, v)
		case string:
			testarossa.NotContains(tc.t, string(body), v)
		default:
			vv := fmt.Sprintf("%v", v)
			testarossa.NotContains(tc.t, string(body), vv)
		}
	}
	return tc
}

// HeaderContains asserts no error and that the named header contains the value.
func (tc *CacheStoreTestCase) HeaderContains(headerName string, value string) *CacheStoreTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.Contains(tc.t, tc.res.Header.Get(headerName), value)
	}
	return tc
}

// HeaderNotContains asserts no error and that the named header does not contain a string.
func (tc *CacheStoreTestCase) HeaderNotContains(headerName string, value string) *CacheStoreTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.NotContains(tc.t, tc.res.Header.Get(headerName), value)
	}
	return tc
}

// HeaderEqual asserts no error and that the named header matches the value.
func (tc *CacheStoreTestCase) HeaderEqual(headerName string, value string) *CacheStoreTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.Equal(tc.t, value, tc.res.Header.Get(headerName))
	}
	return tc
}

// HeaderNotEqual asserts no error and that the named header does not matche the value.
func (tc *CacheStoreTestCase) HeaderNotEqual(headerName string, value string) *CacheStoreTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.NotEqual(tc.t, value, tc.res.Header.Get(headerName))
	}
	return tc
}

// HeaderExists asserts no error and that the named header exists.
func (tc *CacheStoreTestCase) HeaderExists(headerName string) *CacheStoreTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.NotEqual(tc.t, 0, len(tc.res.Header.Values(headerName)), "Header %s does not exist", headerName)
	}
	return tc
}

// HeaderNotExists asserts no error and that the named header does not exists.
func (tc *CacheStoreTestCase) HeaderNotExists(headerName string) *CacheStoreTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.Equal(tc.t, 0, len(tc.res.Header.Values(headerName)), "Header %s exists", headerName)
	}
	return tc
}

// ContentType asserts no error and that the Content-Type header matches the expected value.
func (tc *CacheStoreTestCase) ContentType(expected string) *CacheStoreTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		testarossa.Equal(tc.t, expected, tc.res.Header.Get("Content-Type"))
	}
	return tc
}

/*
TagExists asserts no error and that the at least one tag matches the CSS selector query.

Examples:

	TagExists(`TR > TD > A.expandable[href]`)
	TagExists(`DIV#main_panel`)
	TagExists(`TR TD INPUT[name="x"]`)
*/
func (tc *CacheStoreTestCase) TagExists(cssSelectorQuery string) *CacheStoreTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		selector, err := cascadia.Compile(cssSelectorQuery)
		if !testarossa.NoError(tc.t, err, "Invalid selector %s", cssSelectorQuery) {
			return tc
		}
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		doc, err := html.Parse(bytes.NewReader(body))
		if !testarossa.NoError(tc.t, err, "Failed to parse HTML") {
			return tc
		}
		matches := selector.MatchAll(doc)
		testarossa.NotEqual(tc.t, 0, len(matches), "Found no tags matching %s", cssSelectorQuery)
	}
	return tc
}

/*
TagNotExists asserts no error and that the no tag matches the CSS selector query.

Example:

	TagNotExists(`TR > TD > A.expandable[href]`)
	TagNotExists(`DIV#main_panel`)
	TagNotExists(`TR TD INPUT[name="x"]`)
*/
func (tc *CacheStoreTestCase) TagNotExists(cssSelectorQuery string) *CacheStoreTestCase {
	if testarossa.NoError(tc.t, tc.err) {
		selector, err := cascadia.Compile(cssSelectorQuery)
		if !testarossa.NoError(tc.t, err, "Invalid selector %s", cssSelectorQuery) {
			return tc
		}
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		doc, err := html.Parse(bytes.NewReader(body))
		if !testarossa.NoError(tc.t, err, "Failed to parse HTML") {
			return tc
		}
		matches := selector.MatchAll(doc)
		testarossa.Equal(tc.t, 0, len(matches), "Found %d tag(s) matching %s", len(matches), cssSelectorQuery)
	}
	return tc
}

/*
TagEqual asserts no error and that the at least one of the tags matching the CSS selector query
either contains the exact text itself or has a descendant that does.

Example:

	TagEqual("TR > TD > A.expandable[href]", "Expand")
	TagEqual("DIV#main_panel > SELECT > OPTION", "Red")
*/
func (tc *CacheStoreTestCase) TagEqual(cssSelectorQuery string, value string) *CacheStoreTestCase {
	var textMatches func(n *html.Node) bool
	textMatches = func(n *html.Node) bool {
		for x := n.FirstChild; x != nil; x = x.NextSibling {
			if x.Data == value || textMatches(x) {
				return true
			}
		}
		return false
	}

	if testarossa.NoError(tc.t, tc.err) {
		selector, err := cascadia.Compile(cssSelectorQuery)
		if !testarossa.NoError(tc.t, err, "Invalid selector %s", cssSelectorQuery) {
			return tc
		}
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		doc, err := html.Parse(bytes.NewReader(body))
		if !testarossa.NoError(tc.t, err, "Failed to parse HTML") {
			return tc
		}
		matches := selector.MatchAll(doc)
		if !testarossa.NotEqual(tc.t, 0, len(matches), "Selector %s does not match any tags", cssSelectorQuery) {
			return tc
		}
		if value == "" {
			return tc
		}
		found := false
		for _, match := range matches {
			if textMatches(match) {
				found = true
				break
			}
		}
		testarossa.True(tc.t, found, "No tag matching %s contains %s", cssSelectorQuery, value)
	}
	return tc
}

/*
TagContains asserts no error and that the at least one of the tags matching the CSS selector query
either contains the text itself or has a descendant that does.

Example:

	TagContains("TR > TD > A.expandable[href]", "Expand")
	TagContains("DIV#main_panel > SELECT > OPTION", "Red")
*/
func (tc *CacheStoreTestCase) TagContains(cssSelectorQuery string, value string) *CacheStoreTestCase {
	var textMatches func(n *html.Node) bool
	textMatches = func(n *html.Node) bool {
		for x := n.FirstChild; x != nil; x = x.NextSibling {
			if strings.Contains(x.Data, value) || textMatches(x) {
				return true
			}
		}
		return false
	}

	if testarossa.NoError(tc.t, tc.err) {
		selector, err := cascadia.Compile(cssSelectorQuery)
		if !testarossa.NoError(tc.t, err, "Invalid selector %s", cssSelectorQuery) {
			return tc
		}
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		doc, err := html.Parse(bytes.NewReader(body))
		if !testarossa.NoError(tc.t, err, "Failed to parse HTML") {
			return tc
		}
		matches := selector.MatchAll(doc)
		if !testarossa.NotEqual(tc.t, 0, len(matches), "Selector %s does not match any tags", cssSelectorQuery) {
			return tc
		}
		if value == "" {
			return tc
		}
		found := false
		for _, match := range matches {
			if textMatches(match) {
				found = true
				break
			}
		}
		testarossa.True(tc.t, found, "No tag matching %s contains %s", cssSelectorQuery, value)
	}
	return tc
}

/*
TagNotEqual asserts no error and that there is no tag matching the CSS selector that
either contains the exact text itself or has a descendant that does.

Example:

	TagNotEqual("TR > TD > A[href]", "Harry Potter")
	TagNotEqual("DIV#main_panel > SELECT > OPTION", "Red")
*/
func (tc *CacheStoreTestCase) TagNotEqual(cssSelectorQuery string, value string) *CacheStoreTestCase {
	var textMatches func(n *html.Node) bool
	textMatches = func(n *html.Node) bool {
		for x := n.FirstChild; x != nil; x = x.NextSibling {
			if x.Data == value || textMatches(x) {
				return true
			}
		}
		return false
	}

	if testarossa.NoError(tc.t, tc.err) {
		selector, err := cascadia.Compile(cssSelectorQuery)
		if !testarossa.NoError(tc.t, err, "Invalid selector %s", cssSelectorQuery) {
			return tc
		}
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		doc, err := html.Parse(bytes.NewReader(body))
		if !testarossa.NoError(tc.t, err, "Failed to parse HTML") {
			return tc
		}
		matches := selector.MatchAll(doc)
		if len(matches) == 0 {
			return tc
		}
		if !testarossa.NotEqual(tc.t, "", value, "Found tag matching %s", cssSelectorQuery) {
			return tc
		}
		found := false
		for _, match := range matches {
			if textMatches(match) {
				found = true
				break
			}
		}
		testarossa.False(tc.t, found, "Found tag matching %s that contains %s", cssSelectorQuery, value)
	}
	return tc
}

/*
TagNotContains asserts no error and that there is no tag matching the CSS selector that
either contains the text itself or has a descendant that does.

Example:

	TagNotContains("TR > TD > A[href]", "Harry Potter")
	TagNotContains("DIV#main_panel > SELECT > OPTION", "Red")
*/
func (tc *CacheStoreTestCase) TagNotContains(cssSelectorQuery string, value string) *CacheStoreTestCase {
	var textMatches func(n *html.Node) bool
	textMatches = func(n *html.Node) bool {
		for x := n.FirstChild; x != nil; x = x.NextSibling {
			if strings.Contains(x.Data, value) || textMatches(x) {
				return true
			}
		}
		return false
	}

	if testarossa.NoError(tc.t, tc.err) {
		selector, err := cascadia.Compile(cssSelectorQuery)
		if !testarossa.NoError(tc.t, err, "Invalid selector %s", cssSelectorQuery) {
			return tc
		}
		var body []byte
		if br, ok := tc.res.Body.(*httpx.BodyReader); ok {
			body = br.Bytes()
		} else {
			var err error
			body, err = io.ReadAll(tc.res.Body)
			if !testarossa.NoError(tc.t, err, "Failed to read body") {
				return tc
			}
			tc.res.Body = io.NopCloser(bytes.NewReader(body))
		}
		doc, err := html.Parse(bytes.NewReader(body))
		if !testarossa.NoError(tc.t, err, "Failed to parse HTML") {
			return tc
		}
		matches := selector.MatchAll(doc)
		if len(matches) == 0 {
			return tc
		}
		if !testarossa.NotEqual(tc.t, "", value, "Found tag matching %s", cssSelectorQuery) {
			return tc
		}
		found := false
		for _, match := range matches {
			if textMatches(match) {
				found = true
				break
			}
		}
		testarossa.False(tc.t, found, "Found tag matching %s that contains %s", cssSelectorQuery, value)
	}
	return tc
}

// Error asserts an error.
func (tc *CacheStoreTestCase) Error(errContains string) *CacheStoreTestCase {
	if testarossa.Error(tc.t, tc.err) {
		testarossa.Contains(tc.t, tc.err.Error(), errContains)
	}
	return tc
}

// ErrorCode asserts an error by its status code.
func (tc *CacheStoreTestCase) ErrorCode(statusCode int) *CacheStoreTestCase {
	if testarossa.Error(tc.t, tc.err) {
		testarossa.Equal(tc.t, statusCode, errors.Convert(tc.err).StatusCode)
	}
	return tc
}

// NoError asserts no error.
func (tc *CacheStoreTestCase) NoError() *CacheStoreTestCase {
	testarossa.NoError(tc.t, tc.err)
	return tc
}

// CompletedIn checks that the duration of the operation is less than or equal the threshold.
func (tc *CacheStoreTestCase) CompletedIn(threshold time.Duration) *CacheStoreTestCase {
	testarossa.True(tc.t, tc.dur <= threshold)
	return tc
}

// Assert asserts using a provided function.
func (tc *CacheStoreTestCase) Assert(asserter func(t *testing.T, res *http.Response, err error)) *CacheStoreTestCase {
	asserter(tc.t, tc.res, tc.err)
	return tc
}

// Get returns the result of executing CacheStore.
func (tc *CacheStoreTestCase) Get() (res *http.Response, err error) {
	return tc.res, tc.err
}

/*
CacheStore_Get performs a GET request to the CacheStore endpoint.

CacheStore stores an element in the distributed cache of the microservice.

If a URL is not provided, it defaults to the URL of the endpoint. Otherwise, it is resolved relative to the URL of the endpoint.
*/
func CacheStore_Get(t *testing.T, ctx context.Context, url string) *CacheStoreTestCase {
	tc := &CacheStoreTestCase{t: t}
	var err error
	url, err = httpx.ResolveURL(messagingapi.URLOfCacheStore, url)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	url, err = httpx.FillPathArguments(url)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	r, err := http.NewRequest("GET", url, nil)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	ctx = frame.CloneContext(ctx)
	r = r.WithContext(ctx)
	r.Header = frame.Of(ctx).Header()
	w := httpx.NewResponseRecorder()
	t0 := time.Now()
	tc.err = utils.CatchPanic(func() error {
		return Svc.CacheStore(w, r)
	})
	tc.dur = time.Since(t0)
	tc.res = w.Result()
	return tc
}

/*
CacheStore_Post performs a POST request to the CacheStore endpoint.

CacheStore stores an element in the distributed cache of the microservice.

If a URL is not provided, it defaults to the URL of the endpoint. Otherwise, it is resolved relative to the URL of the endpoint.
If the body if of type io.Reader, []byte or string, it is serialized in binary form.
If it is of type url.Values, it is serialized as form data. All other types are serialized as JSON.
If a content type is not explicitly provided, an attempt will be made to derive it from the body.
*/
func CacheStore_Post(t *testing.T, ctx context.Context, url string, contentType string, body any) *CacheStoreTestCase {
	tc := &CacheStoreTestCase{t: t}
	var err error
	url, err = httpx.ResolveURL(messagingapi.URLOfCacheStore, url)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	url, err = httpx.FillPathArguments(url)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	r, err := httpx.NewRequest("POST", url, nil)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	ctx = frame.CloneContext(ctx)
	r = r.WithContext(ctx)
	r.Header = frame.Of(ctx).Header()
	err = httpx.SetRequestBody(r, body)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	if contentType != "" {
		r.Header.Set("Content-Type", contentType)
	}
	w := httpx.NewResponseRecorder()
	t0 := time.Now()
	tc.err = utils.CatchPanic(func() error {
		return Svc.CacheStore(w, r)
	})
	tc.dur = time.Since(t0)
	tc.res = w.Result()
	return tc
}

/*
CacheStore stores an element in the distributed cache of the microservice.

If a request is not provided, it defaults to the URL of the endpoint. Otherwise, it is resolved relative to the URL of the endpoint.
*/
func CacheStore(t *testing.T, r *http.Request) *CacheStoreTestCase {
	tc := &CacheStoreTestCase{t: t}
	var err error
	if r == nil {
		r, err = http.NewRequest(`GET`, "", nil)
		if err != nil {
			tc.err = errors.Trace(err)
			return tc
		}
	}
	url, err := httpx.ResolveURL(messagingapi.URLOfCacheStore, r.URL.String())
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	url, err = httpx.FillPathArguments(url)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	r.URL, err = httpx.ParseURL(url)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	for k, vv := range frame.Of(r.Context()).Header() {
		r.Header[k] = vv
	}
	ctx := frame.ContextWithFrameOf(r.Context(), r.Header)
	r = r.WithContext(ctx)
	w := httpx.NewResponseRecorder()
	t0 := time.Now()
	tc.err = utils.CatchPanic(func() error {
		return Svc.CacheStore(w, r)
	})
	tc.res = w.Result()
	tc.dur = time.Since(t0)
	return tc
}
