// Code generated by Microbus. DO NOT EDIT.

/*
Package intermediate serves as the foundation of the {{ .General.Host }} microservice.
{{- if .General.Description }}

{{ .General.Description }}
{{- end }}
*/
package intermediate

import (
	"context"
	"embed"
	"encoding/json"
	"fmt"
	"net/http"
	"path/filepath"
	"strconv"
	"strings"
	"time"

	"github.com/microbus-io/fabric/cfg"
	"github.com/microbus-io/fabric/connector"
	"github.com/microbus-io/fabric/errors"
	"github.com/microbus-io/fabric/frame"
	"github.com/microbus-io/fabric/httpx"
	"github.com/microbus-io/fabric/openapi"
	"github.com/microbus-io/fabric/service"
	"github.com/microbus-io/fabric/sub"

	"gopkg.in/yaml.v3"

	"{{ .Package }}/resources"
	"{{ .Package }}/{{ .PackageSuffix }}api"

	{{- if .Sinks }}
	{{ range $i, $s := .Sinks }}
	{{ .SourceSuffix }}api{{ Add $i 1 }} "{{ .Source }}/{{ .SourceSuffix }}api"
	{{- end}}{{end}}
)

var (
	_ context.Context
	_ *embed.FS
	_ *json.Decoder
	_ fmt.Stringer
	_ *http.Request
	_ filepath.WalkFunc
	_ strconv.NumError
	_ strings.Reader
	_ time.Duration
	_ cfg.Option
	_ *errors.TracedError
	_ frame.Frame
	_ *httpx.ResponseRecorder
	_ *openapi.Service
	_ service.Service
	_ sub.Option
	_ yaml.Encoder
	_ {{ .PackageSuffix }}api.Client
)

// ToDo defines the interface that the microservice must implement.
// The intermediate delegates handling to this interface.
type ToDo interface {
	OnStartup(ctx context.Context) (err error)
	OnShutdown(ctx context.Context) (err error)

	{{- range .Configs}}{{ if .Callback}}
	OnChanged{{ .Name }}(ctx context.Context) (err error)
	{{- end}}{{- end}}

	{{- range (JoinHandlers .Functions .Sinks)}}
	{{ .Name }}({{ .In }}) ({{ .Out }})
	{{- end}}

	{{- range .Webs}}
	{{ .Name }}(w http.ResponseWriter, r *http.Request) (err error)
	{{- end}}

	{{- range .Tickers}}
	{{ .Name }}(ctx context.Context) (err error)
	{{- end}}
}

// Intermediate extends and customizes the generic base connector.
// Code generated microservices then extend the intermediate.
type Intermediate struct {
	*connector.Connector
	impl ToDo
}

// NewService creates a new intermediate service.
func NewService(impl ToDo, version int) *Intermediate {
	svc := &Intermediate{
		Connector: connector.New("{{ .General.Host }}"),
		impl: impl,
	}
	svc.SetVersion(version)
	svc.SetDescription(`{{ .General.Description }}`)
	
	// Lifecycle
	svc.SetOnStartup(svc.impl.OnStartup)
	svc.SetOnShutdown(svc.impl.OnShutdown)

	{{- if .Configs }}

	// Configs
	svc.SetOnConfigChanged(svc.doOnConfigChanged)
	{{- range .Configs }}
	svc.DefineConfig(
		"{{ .Name }}",
		{{- if .Description }}
		cfg.Description(`{{ .Description }}`),{{ end }}
		{{- if .Validation }}
		cfg.Validation(`{{ .Validation }}`),{{ end }}
		{{- if .Default }}
		cfg.DefaultValue(`{{ .Default }}`),{{ end }}
		{{- if .Secret }}
		cfg.Secret(),{{ end }}
	)
	{{- end }}{{ end }}

	// OpenAPI
	svc.Subscribe("GET", `:0/openapi.json`, svc.doOpenAPI)

	{{- if .Functions }}	

	// Functions
	{{- range .Functions }}
	svc.Subscribe(`{{ .Method }}`, `{{ .Path }}`, svc.do{{ .Name }} {{- if eq .Queue "none"}}, sub.NoQueue(){{end -}} )
	{{- end }}{{ end }}

	{{- if .Webs }}

	// Webs
	{{- range .Webs }}
	svc.Subscribe(`{{ .Method }}`, `{{ .Path }}`, svc.impl.{{ .Name }} {{- if eq .Queue "none" }}, sub.NoQueue(){{ end -}} )
	{{- end }}{{ end }}

	{{- if .Sinks }}

	// Sinks
	{{- range $i, $s := .Sinks }}
	{{ .SourceSuffix }}api{{ Add $i 1 }}.NewHook(svc).
	{{- if .ForHost }}ForHost(`{{ .ForHost }}`).{{ end }}
	{{- .Event }}(svc.impl.{{ .Name }}
	{{- if eq .Queue "none"}}, sub.NoQueue(){{ end -}}
	)
	{{- end }}{{ end }}

	{{- if .Tickers }}

	// Tickers
	{{- range .Tickers }}
	interval{{ .Name }}, _ := time.ParseDuration("{{ .Interval }}")
	svc.StartTicker("{{ .Name }}", interval{{ .Name }}, svc.impl.{{ .Name }})
	{{- end }}{{ end }}

	{{- if .Metrics }}

	// Metrics
	{{- range .Metrics }}
	svc.Define{{ CapitalizeIdentifier .Kind }}(
		`{{ .Alias }}`,
		`{{ .Description }}`,
		{{- if .Buckets }}
		[]float64{{ "{" }}{{ range $i, $elem := .Buckets }}{{ if $i }}, {{ end }}{{ . }}{{ end }}{{ "}" }},
		{{- end }}
		[]string{{ "{" }}{{ range $i, $elem := .Signature.InputArgs }}{{ if gt $i 1 }}, {{ end }}{{ if gt $i 0 }}"{{ .Name }}"{{ end }}{{ end }}{{ "}" }},
	)
	{{- end }}{{ end }}

	// Resources file system
	svc.SetResFS(resources.FS)

	return svc
}

// doOpenAPI renders the OpenAPI document of the microservice.
func (svc *Intermediate) doOpenAPI(w http.ResponseWriter, r *http.Request) error {
	oapiSvc := openapi.Service{
		ServiceName: svc.Hostname(),
		Description: svc.Description(),
		Version:     svc.Version(),
		Endpoints:   []*openapi.Endpoint{},
		RemoteURI:   frame.Of(r).XForwardedFullURL(),
	}

	{{- if .General.OpenAPI}}{{- range (JoinHandlers .Functions .Webs) }}{{- if .OpenAPI}}
	if r.URL.Port() == "{{ .Port }}" || "{{ .Port }}" == "0" {
		oapiSvc.Endpoints = append(oapiSvc.Endpoints, &openapi.Endpoint{
			Type:        `{{ .Type }}`,
			Name:        `{{ .Name }}`,
			Method:      `{{ .Method }}`,
			Path:        `{{ .Path }}`,
			Summary:     `{{ .Signature.OrigString }}`,
			Description: `{{ .Description }}`,
			InputArgs: struct {
				{{- range .Signature.InputArgs}}
				{{ CapitalizeIdentifier .Name }} {{ .Type }} `json:"{{ .Name }}"`
				{{- end}}
			}{},
			OutputArgs: struct {
				{{- range .Signature.OutputArgs}}
				{{ CapitalizeIdentifier .Name }} {{ .Type }} `json:"{{ if eq .Name "httpStatusCode" }}-{{ else }}{{ .Name }}{{ end }}"`
				{{- end }}
			}{},
		})
	}
	{{- end}}{{end}}{{end}}

	if len(oapiSvc.Endpoints) == 0 {
		w.WriteHeader(http.StatusNotFound)
		return nil
	}
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	encoder := json.NewEncoder(w)
	encoder.SetIndent("", "  ")
	err := encoder.Encode(&oapiSvc)
	return errors.Trace(err)
}
