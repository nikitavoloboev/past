// Code generated by Microbus. DO NOT EDIT.

package intermediate

import (
	"context"
	"net/http"
	"time"

	"github.com/microbus-io/fabric/connector"
	"github.com/microbus-io/fabric/errors"

	"{{ .Package }}/{{ .PackageSuffix }}api"
)

var (
	_ context.Context
	_ *http.Request
	_ time.Duration
	_ *errors.TracedError
	_ {{ .PackageSuffix }}api.Client
)

// Mock is a mockable version of the {{ .General.Host }} microservice, allowing functions, event sinks and web handlers to be mocked.
type Mock struct {
	*Intermediate
	{{- range (JoinHandlers .Functions .Sinks)}}
	mock{{ .Name }} func({{ .In }}) ({{ .Out }})
	{{- end}}
	{{- range .Webs}}
	mock{{ .Name }} func(w http.ResponseWriter, r *http.Request) (err error)
	{{- end}}
}

// NewMock creates a new mockable version of the microservice.
func NewMock() *Mock {
	m := &Mock{}
	m.Intermediate = NewService(m, 7357) // Stands for TEST
	return m
}

// OnStartup makes sure that the mock is not executed in a non-dev environment.
func (svc *Mock) OnStartup(ctx context.Context) (err error) {
	if svc.Deployment() != connector.LOCAL && svc.Deployment() != connector.TESTING {
		return errors.Newf("mocking disallowed in '%s' deployment", svc.Deployment())
	}
	return nil
}

// OnShutdown is a no op.
func (svc *Mock) OnShutdown(ctx context.Context) (err error) {
	return nil
}

{{- range (JoinHandlers .Functions .Sinks) }}

// Mock{{ .Name }} sets up a mock handler for the {{ .Name }} endpoint.
func (svc *Mock) Mock{{ .Name }}(handler func({{ .In }}) ({{ .Out }})) *Mock {
	svc.mock{{ .Name }} = handler
	return svc
}

// {{ .Name }} runs the mock handler set by Mock{{ .Name }}.
func (svc *Mock) {{ .Name }}({{ .In }}) ({{ .Out }}) {
	if svc.mock{{ .Name }} == nil {
		err = errors.New("mocked endpoint '{{ .Name }}' not implemented")
		return
	}
	return svc.mock{{ .Name }}(ctx {{- range .Signature.InputArgs }}, {{ .Name }}{{ end }})
}
{{- end}}

{{- range .Webs }}

// Mock{{ .Name }} sets up a mock handler for the {{ .Name }} endpoint.
func (svc *Mock) Mock{{ .Name }}(handler func(w http.ResponseWriter, r *http.Request) (err error)) *Mock {
	svc.mock{{ .Name }} = handler
	return svc
}

// {{ .Name }} runs the mock handler set by Mock{{ .Name }}.
func (svc *Mock) {{ .Name }}(w http.ResponseWriter, r *http.Request) (err error) {
	if svc.mock{{ .Name }} == nil {
		return errors.New("mocked endpoint '{{ .Name }}' not implemented")
	}
	err = svc.mock{{ .Name }}(w, r)
	return errors.Trace(err)
}
{{- end }}

{{- range .Configs}}{{ if .Callback}}

// OnChanged{{ .Name }} is a no op.
func (svc *Mock) OnChanged{{ .Name }}(ctx context.Context) (err error) {
	return nil
}
{{- end}}{{- end}}

{{- range .Tickers}}

// {{ .Name }} is a no op.
func (svc *Mock) {{ .Name }}(ctx context.Context) (err error) {
	return nil
}
{{- end}}
