// Code generated by Microbus. DO NOT EDIT.

/*
Package {{ .PackageSuffix }}api implements the public API of the {{ .General.Host }} microservice,
including clients and data structures.
{{- if .General.Description }}

{{ .General.Description }}
{{- end }}
*/
package {{ .PackageSuffix }}api

import (
	"context"
	"encoding/json"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/microbus-io/fabric/errors"
	"github.com/microbus-io/fabric/httpx"
	"github.com/microbus-io/fabric/pub"
	"github.com/microbus-io/fabric/service"
	"github.com/microbus-io/fabric/sub"
)

var (
	_ context.Context
	_ *json.Decoder
	_ io.Reader
	_ *http.Request
	_ *url.URL
	_ strings.Reader
	_ time.Duration
	_ *errors.TracedError
	_ *httpx.BodyReader
	_ pub.Option
	_ sub.Option
)

// Hostname is the default hostname of the microservice: {{ .General.Host }}.
const Hostname = "{{ .General.Host }}"

// Fully-qualified URLs of the microservice's endpoints.
var (
{{- range (JoinHandlers .Functions .Webs) }}
	URLOf{{ .Name }} = httpx.JoinHostAndPath(Hostname, `{{ .Path }}`)
{{- end }}
)

// Client is an interface to calling the endpoints of the {{ .General.Host }} microservice.
// This simple version is for unicast calls.
type Client struct {
	svc  service.Publisher
	host string
}

// NewClient creates a new unicast client to the {{ .General.Host }} microservice.
func NewClient(caller service.Publisher) *Client {
	return &Client{
		svc:  caller,
		host: "{{ .General.Host }}",
	}
}

// ForHost replaces the default hostname of this client.
func (_c *Client) ForHost(host string) *Client {
	_c.host = host
	return _c
}

// MulticastClient is an interface to calling the endpoints of the {{ .General.Host }} microservice.
// This advanced version is for multicast calls.
type MulticastClient struct {
	svc  service.Publisher
	host string
}

// NewMulticastClient creates a new multicast client to the {{ .General.Host }} microservice.
func NewMulticastClient(caller service.Publisher) *MulticastClient {
	return &MulticastClient{
		svc:  caller,
		host: "{{ .General.Host }}",
	}
}

// ForHost replaces the default hostname of this client.
func (_c *MulticastClient) ForHost(host string) *MulticastClient {
	_c.host = host
	return _c
}

{{- if .Events }}

// MulticastTrigger is an interface to trigger the events of the {{ .General.Host }} microservice.
type MulticastTrigger struct {
	svc  service.Publisher
	host string
}

// NewMulticastTrigger creates a new multicast trigger of the {{ .General.Host }} microservice.
func NewMulticastTrigger(caller service.Publisher) *MulticastTrigger {
	return &MulticastTrigger{
		svc:  caller,
		host: "{{ .General.Host }}",
	}
}

// ForHost replaces the default hostname of this trigger.
func (_c *MulticastTrigger) ForHost(host string) *MulticastTrigger {
	_c.host = host
	return _c
}

// Hook assists in the subscription to the events of the {{ .General.Host }} microservice.
type Hook struct {
	svc  service.Subscriber
	host string
}

// NewHook creates a new hook to the events of the {{ .General.Host }} microservice.
func NewHook(listener service.Subscriber) *Hook {
	return &Hook{
		svc:  listener,
		host: "{{ .General.Host }}",
	}
}

// ForHost replaces the default hostname of this hook.
func (_c *Hook) ForHost(host string) *Hook {
	_c.host = host
	return _c
}
{{- end}}
