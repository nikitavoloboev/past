// Code generated by Microbus. DO NOT EDIT.

/*
Package {{ .PackageSuffix }} implements the {{ .General.Host }} microservice.
{{- if .General.Description }}

{{ .General.Description }}
{{- end }}
*/
package {{ .PackageSuffix }}

import (
	"context"
	"net/http"
	"time"

	"github.com/microbus-io/fabric/errors"
	"github.com/microbus-io/fabric/service"

	"{{ .Package }}/intermediate"
	"{{ .Package }}/{{ .PackageSuffix }}api"
)

var (
	_ context.Context
	_ *http.Request
	_ time.Duration
	_ service.Service
	_ *errors.TracedError
	_ *{{ .PackageSuffix }}api.Client
)

// Hostname is the default hostname of the microservice: {{ .General.Host }}.
const Hostname = "{{ .General.Host }}"

// NewService creates a new {{ .General.Host }} microservice.
func NewService() *Service {
	s := &Service{}
	s.Intermediate = intermediate.NewService(s, Version)
	return s
}

// Mock is a mockable version of the {{ .General.Host }} microservice, allowing functions, event sinks and web handlers to be mocked.
type Mock = intermediate.Mock

// New creates a new mockable version of the microservice.
func NewMock() *Mock {
	return intermediate.NewMock()
}

/*
Init enables a single-statement pattern for initializing the microservice.

	svc.Init(func(svc Service) {
		svc.SetGreeting("Hello")
	})
*/
func (svc *Service) Init(initializer func(svc *Service)) *Service {
	initializer(svc)
	return svc
}
