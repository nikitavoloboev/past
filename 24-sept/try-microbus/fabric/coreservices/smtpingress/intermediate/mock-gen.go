/*
Copyright (c) 2023-2024 Microbus LLC and various contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Microbus. DO NOT EDIT.

package intermediate

import (
	"context"
	"net/http"
	"time"

	"github.com/microbus-io/fabric/connector"
	"github.com/microbus-io/fabric/errors"

	"github.com/microbus-io/fabric/coreservices/smtpingress/smtpingressapi"
)

var (
	_ context.Context
	_ *http.Request
	_ time.Duration
	_ *errors.TracedError
	_ smtpingressapi.Client
)

// Mock is a mockable version of the smtp.ingress.core microservice, allowing functions, event sinks and web handlers to be mocked.
type Mock struct {
	*Intermediate
}

// NewMock creates a new mockable version of the microservice.
func NewMock() *Mock {
	m := &Mock{}
	m.Intermediate = NewService(m, 7357) // Stands for TEST
	return m
}

// OnStartup makes sure that the mock is not executed in a non-dev environment.
func (svc *Mock) OnStartup(ctx context.Context) (err error) {
	if svc.Deployment() != connector.LOCAL && svc.Deployment() != connector.TESTING {
		return errors.Newf("mocking disallowed in '%s' deployment", svc.Deployment())
	}
	return nil
}

// OnShutdown is a no op.
func (svc *Mock) OnShutdown(ctx context.Context) (err error) {
	return nil
}

// OnChangedPort is a no op.
func (svc *Mock) OnChangedPort(ctx context.Context) (err error) {
	return nil
}

// OnChangedEnabled is a no op.
func (svc *Mock) OnChangedEnabled(ctx context.Context) (err error) {
	return nil
}

// OnChangedMaxSize is a no op.
func (svc *Mock) OnChangedMaxSize(ctx context.Context) (err error) {
	return nil
}

// OnChangedMaxClients is a no op.
func (svc *Mock) OnChangedMaxClients(ctx context.Context) (err error) {
	return nil
}

// OnChangedWorkers is a no op.
func (svc *Mock) OnChangedWorkers(ctx context.Context) (err error) {
	return nil
}
